/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.customers;

import gui.orders.OrdersStruct;
import database.databaseStruct.TableStructInterface;
import gui.InfoDialog;
import gui.Window;
import gui.orders.OrdersWindow;
import gui.orders.OrdersWindowType;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;
import sqlconnector.SqlWhereStruct;

/**
 *
 * @author User
 */
public class CustomersWindow extends javax.swing.JInternalFrame implements Window {

    public CustomersWindow() {
        super("CUSTOMERS", true,true,true,true);
        initComponents();
        onInit();
    }
    
    //Result handler
    private Window parent;
    private CustomersWindowType type;
 
    public CustomersWindow(Window parent) {        
        super("CUSTOMERS", true,true,true,true);
        this.parent = parent;
        initComponents();
        onInit();
    }

    private void onInit() {
        updateCustomerTable();
        this.setResizable(true);
        this.setVisible(true);
    }
    
    private void updateCustomerTable() {
        updateCustomerTable(new ArrayList());
    }
    
    private void updateCustomerTable(List<Map<SqlWhereStruct, Object>> map) {
        DefaultTableModel customersModel = new DefaultTableModel(null, CustomersStruct.getValuesAsString());
        String select = Sql.getSelectQuery(CustomersStruct.getTableName(), CustomersStruct.values(), map);
        SqlConnector.doSelectQuery(select, CustomersStruct.values(), customersModel);
        customerTable.setModel(customersModel);
        customerTable.repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameFilter = new javax.swing.JTextField();
        surnameFilter = new javax.swing.JTextField();
        idFilter = new javax.swing.JTextField();
        emailFilter = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        allegroNickFilter = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        phoneFilter = new javax.swing.JTextField();
        addNewCustomerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        selectButton = new javax.swing.JButton();
        closeCustomerFrame = new javax.swing.JButton();
        deleteCustomer = new javax.swing.JButton();
        viewCustomerOrders = new javax.swing.JButton();
        clearFields = new javax.swing.JButton();

        jLabel2.setText("NAME");

        jLabel3.setText("SURNAME");

        jLabel4.setText("ID");

        jLabel5.setText("E-MAIL");

        nameFilter.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                nameFilterCaretUpdate(evt);
            }
        });
        nameFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFilterActionPerformed(evt);
            }
        });
        nameFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameFilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameFilterKeyTyped(evt);
            }
        });

        surnameFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                surnameFilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                surnameFilterKeyTyped(evt);
            }
        });

        idFilter.setEnabled(false);

        emailFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailFilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailFilterKeyTyped(evt);
            }
        });

        jLabel6.setText("ALLEGRO NICK");

        allegroNickFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                allegroNickFilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                allegroNickFilterKeyTyped(evt);
            }
        });

        jLabel7.setText("PHONE");

        phoneFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                phoneFilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneFilterKeyTyped(evt);
            }
        });

        addNewCustomerButton.setText("ADD NEW CUSTOMER");
        addNewCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewCustomerButtonActionPerformed(evt);
            }
        });

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            null,
            CustomersStruct.getValuesAsString()
        ));
        customerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customerTable);

        if(parent == null) {
            selectButton.setVisible(false);
        } else {
            selectButton.setVisible(true);
        }
        selectButton.setText("SELECT");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        closeCustomerFrame.setText("CLOSE WINDOW");
        closeCustomerFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeCustomerFrameActionPerformed(evt);
            }
        });

        deleteCustomer.setText("DELETE CUSTOMER");
        deleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerActionPerformed(evt);
            }
        });

        viewCustomerOrders.setText("VIEW CUSTOMER ORDERS");
        viewCustomerOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCustomerOrdersActionPerformed(evt);
            }
        });

        clearFields.setText("CLEAR FIELDS");
        clearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(clearFields)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(surnameFilter)
                            .addComponent(allegroNickFilter)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addComponent(phoneFilter)
                            .addComponent(idFilter)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(closeCustomerFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(addNewCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(viewCustomerOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(nameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearFields))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(emailFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(surnameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(allegroNickFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(phoneFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addNewCustomerButton)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deleteCustomer)
                        .addComponent(viewCustomerOrders)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectButton)
                    .addComponent(closeCustomerFrame))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFilterActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        int m = customerTable.getSelectedRow();
        if(m > -1) {
            Object customerId = customerTable.getValueAt(m, customerTable.getColumn(CustomersStruct.CUSTOMER_ID.toString()).getModelIndex());
            if(customerId != null) {
                parent.setResult(customerId);
            }
            this.dispose();
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void addNewCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewCustomerButtonActionPerformed
        Map<TableStructInterface, Object> params = new HashMap();
        params.put(CustomersStruct.CUSTOMER_NAME, nameFilter.getText());
        params.put(CustomersStruct.CUSTOMER_SURNAME, surnameFilter.getText());
        params.put(CustomersStruct.CUSTOMER_EMAIL, emailFilter.getText());
        params.put(CustomersStruct.CUSTOMER_ALLEGRO_NICK, allegroNickFilter.getText());
        params.put(CustomersStruct.CUSTOMER_PHONE, phoneFilter.getText());    
        
        if(idFilter.getText().equals("")) {
            String sql = Sql.getInsertQuery(CustomersStruct.getTableName(), params);
            if(!SqlConnector.doQuery(sql)) {
                createInfoDialog("Error while adding new Customer");
            }
        } else {
            params.put(CustomersStruct.CUSTOMER_ID, idFilter.getText());    
            String sql = Sql.getReplaceIntoQuery(CustomersStruct.getTableName(), params);                        
            if(!SqlConnector.doQuery(sql)) {
                createInfoDialog("Error while modify Customer");
            }
        }
        
        updateCustomerTable(this.getFiltersMap());         
    }//GEN-LAST:event_addNewCustomerButtonActionPerformed

    private void closeCustomerFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeCustomerFrameActionPerformed
        if(parent != null) {       
            int selectedRow = customerTable.getSelectedRow();
            parent.setResult(customerTable.getValueAt(selectedRow, customerTable.getColumn(CustomersStruct.CUSTOMER_ID.toString()).getModelIndex()));
        }
        this.dispose();
    }//GEN-LAST:event_closeCustomerFrameActionPerformed

    private void customerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerTableMouseClicked

        int m = customerTable.getSelectedRow();
        if(this.isEnabled() && customerTable.getValueAt(m, customerTable.getColumn(CustomersStruct.CUSTOMER_ID.toString()).getModelIndex()) != null) {     
            idFilter.setText(customerTable.getValueAt(m, 0).toString());
            nameFilter.setText(customerTable.getValueAt(m, 1).toString());
            surnameFilter.setText((customerTable.getValueAt(m, 2) != null) ? customerTable.getValueAt(m, 2).toString() : "");
            String email = (String)customerTable.getValueAt(m, 3);            
            emailFilter.setText(email == null ? "" : email);
            String allegroNick = (String)customerTable.getValueAt(m, 4); 
            allegroNickFilter.setText(allegroNick);
            String phone = (String)customerTable.getValueAt(m, 5);
            phoneFilter.setText(phone); 
            
            addNewCustomerButton.setText("MODIFY CUSTOMER");
            viewCustomerOrders.setEnabled(true);
        } else {
            viewCustomerOrders.setEnabled(false);
        }
            
    }//GEN-LAST:event_customerTableMouseClicked

    private void deleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerActionPerformed
        Object customerId = customerTable.getValueAt(customerTable.getSelectedRow(), customerTable.getColumn(CustomersStruct.CUSTOMER_ID.toString()).getModelIndex());
        createInfoDialog("DELETING CUSTOMER: " + customerId + ", CONTINUE ?", "DELETE_CUSTOMER");
    }//GEN-LAST:event_deleteCustomerActionPerformed

    private void viewCustomerOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCustomerOrdersActionPerformed
        OrdersWindow orders = new OrdersWindow(OrdersWindowType.CUSTOMER_ORDERS, this, Integer.parseInt(idFilter.getText()));                
        this.getContentPane().add(orders, 0);
        this.repaint();
        this.setWindowState(false);
    }//GEN-LAST:event_viewCustomerOrdersActionPerformed

    private void clearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsActionPerformed
        idFilter.setText("");
        nameFilter.setText("");
        surnameFilter.setText("");
        emailFilter.setText("");
        allegroNickFilter.setText("");
        phoneFilter.setText(""); 
        addNewCustomerButton.setText("ADD NEW CUSTOMER");        
        customerTable.clearSelection();
        
        updateCustomerTable();
    }//GEN-LAST:event_clearFieldsActionPerformed

    private void nameFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFilterKeyTyped

    }//GEN-LAST:event_nameFilterKeyTyped

    private void surnameFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_surnameFilterKeyTyped

    }//GEN-LAST:event_surnameFilterKeyTyped

    private void allegroNickFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allegroNickFilterKeyTyped

    }//GEN-LAST:event_allegroNickFilterKeyTyped

    private void emailFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailFilterKeyTyped

    }//GEN-LAST:event_emailFilterKeyTyped

    private void phoneFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneFilterKeyTyped

    }//GEN-LAST:event_phoneFilterKeyTyped

    private void nameFilterCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_nameFilterCaretUpdate
 
    }//GEN-LAST:event_nameFilterCaretUpdate

    private void nameFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFilterKeyReleased
        updateCustomerTable(this.getFiltersMap()); 
    }//GEN-LAST:event_nameFilterKeyReleased

    private void surnameFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_surnameFilterKeyReleased
        updateCustomerTable(this.getFiltersMap()); 
    }//GEN-LAST:event_surnameFilterKeyReleased

    private void allegroNickFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allegroNickFilterKeyReleased
        updateCustomerTable(this.getFiltersMap()); 
    }//GEN-LAST:event_allegroNickFilterKeyReleased

    private void emailFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailFilterKeyReleased
        updateCustomerTable(this.getFiltersMap()); 
    }//GEN-LAST:event_emailFilterKeyReleased

    private void phoneFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneFilterKeyReleased
        updateCustomerTable(this.getFiltersMap()); 
    }//GEN-LAST:event_phoneFilterKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewCustomerButton;
    private javax.swing.JTextField allegroNickFilter;
    private javax.swing.JButton clearFields;
    private javax.swing.JButton closeCustomerFrame;
    private javax.swing.JTable customerTable;
    private javax.swing.JButton deleteCustomer;
    private javax.swing.JTextField emailFilter;
    private javax.swing.JTextField idFilter;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameFilter;
    private javax.swing.JTextField phoneFilter;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextField surnameFilter;
    private javax.swing.JButton viewCustomerOrders;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setWindowState(boolean enabled) {
        this.setEnabled(enabled);
        for(Component comp : jPanel2.getComponents()) {
            comp.setEnabled(enabled);
        }
        jScrollPane1.setEnabled(enabled);
        jScrollPane1.getVerticalScrollBar().setEnabled(enabled);
        jScrollPane1.setWheelScrollingEnabled(enabled);
        customerTable.setEnabled(enabled);
    }

    private void createInfoDialog(String message) {
        createInfoDialog(message, "");
    }
    
    private void createInfoDialog(String message, String action) {
        InfoDialog dialog = new InfoDialog(this, message, action);
        dialog.setBounds((this.getWidth()/2) - (dialog.getWidth()/2), (this.getHeight()/2) - (dialog.getHeight()/2), dialog.getWidth(), dialog.getHeight());
        this.add(dialog, 0);
        this.repaint();
        this.setWindowState(false);
    }

    @Override
    public void setResult() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setResult(Object singleResult) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private List<Map<SqlWhereStruct, Object>> getFiltersMap() {
        List<Map<SqlWhereStruct, Object>> map = new ArrayList();

        if(!nameFilter.getText().equals("")) {
            map.add(Sql.getWhereMap(CustomersStruct.CUSTOMER_NAME.toString(), "%" + nameFilter.getText() + "%", "LIKE", "AND"));
        }
        if(!surnameFilter.getText().equals("")) {
            map.add(Sql.getWhereMap(CustomersStruct.CUSTOMER_SURNAME.toString(), "%" + surnameFilter.getText() + "%", "LIKE", "AND"));
        }
        if(!allegroNickFilter.getText().equals("")) {
            map.add(Sql.getWhereMap(CustomersStruct.CUSTOMER_ALLEGRO_NICK.toString(), "%" + allegroNickFilter.getText() + "%", "LIKE", "AND"));
        }
        if(!emailFilter.getText().equals("")) {        
            map.add(Sql.getWhereMap(CustomersStruct.CUSTOMER_EMAIL.toString(), "%" + emailFilter.getText() + "%", "LIKE", "AND"));
        }
        if(!phoneFilter.getText().equals("")) {
            map.add(Sql.getWhereMap(CustomersStruct.CUSTOMER_PHONE.toString(), "%" + phoneFilter.getText() + "%", "LIKE", "AND"));                
        }
        
        return map;
    }        

    @Override
    public void setResult(Map<Object, String> resultMap) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void doAction(String action) {
        switch(action) {
            case "DELETE_CUSTOMER": deleteSelectedCustomer(); break;
            default: break;
        }
    }
    
    public void deleteSelectedCustomer() {
        Object customerId = customerTable.getValueAt(customerTable.getSelectedRow(), customerTable.getColumn(CustomersStruct.CUSTOMER_ID.toString()).getModelIndex());
        
        DefaultTableModel model = new DefaultTableModel(null, OrdersStruct.getColumnNames());
        String query = Sql.getSelectQuery(OrdersStruct.getTableName(), OrdersStruct.values(), Sql.getWhereMap(OrdersStruct.CUSTOMER_ID.toString(), ""+customerId, "=", ""));
        if(!SqlConnector.doSelectQuery(query, OrdersStruct.values(), model)) {
            return;
        }

        if(model.getRowCount() > 0) {
            String message = "Selected customer already added to Orders: ";
            for(int i=0; i<model.getRowCount(); i++) {
                message += model.getValueAt(i, model.findColumn(OrdersStruct.ID.toString()));
                message += ", ";
            }
            message += "\nYou can't delete this customer.";           
            createInfoDialog(message);
            return;
        }
        
        query = Sql.getDeleteQuery(CustomersStruct.getTableName(), Sql.getWhereMap(CustomersStruct.CUSTOMER_ID.toString(), ""+customerId, "=", ""));
        SqlConnector.doDeleteQuery(query);
        
        updateCustomerTable(this.getFiltersMap());     
    }
}
