/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.reports;

import database.databaseStruct.OutcomesStruct;
import database.databaseStruct.TableStructInterface;
import gui.items.ItemsOutStruct;
import gui.orders.OrdersStruct;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.table.DefaultTableModel;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;
import utils.Log;

/**
 *
 * @author User
 */
public class ReportsWindow extends javax.swing.JInternalFrame {

    /**
     * Creates new form ReportsWindow
     */
    public ReportsWindow() {
        initComponents();
        setVisible(false);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        reportResultField = new javax.swing.JTextArea();
        generateReport = new javax.swing.JButton();
        reportType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportResultTable = new javax.swing.JTable();

        reportResultField.setColumns(20);
        reportResultField.setRows(5);
        jScrollPane1.setViewportView(reportResultField);

        generateReport.setText("Generuj");
        generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportActionPerformed(evt);
            }
        });

        reportType.setModel(new javax.swing.DefaultComboBoxModel(ReportType.values()));

        jLabel3.setText("Typ Raportu");

        reportResultTable.setModel(new javax.swing.table.DefaultTableModel(
            null,
            new String[1]
        ));
        jScrollPane2.setViewportView(reportResultTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(generateReport, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(reportType, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(887, 887, 887))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reportType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generateReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportActionPerformed
        Object[][] tableResultModel;
        String[] columnNames;
        
        DefaultTableModel reportModel = new DefaultTableModel(null, new String[1]);
        
        
        String report = "";
        ReportType selectedReportType = (ReportType)reportType.getSelectedItem();
        switch(selectedReportType) {
            case SUMA_SPRZEDAZY:
            {
                TableStructInterface[] columnList = { OutcomesStruct.TYP_EWIDENCJI, OutcomesStruct.CENA_DETALICZNA, OutcomesStruct.DATA_SPRZEDAZY, OutcomesStruct.ILOSC, OutcomesStruct.KOSZT_DOSTAWY };
                String sqlSelect = Sql.getSelectQuery(OutcomesStruct.getTableName(), columnList, Sql.getWhereMap(OutcomesStruct.TYP_EWIDENCJI.toString(), "EWIDENCJA", "LIKE", ""));
                Object[][] result = SqlConnector.doSelectQuery(sqlSelect, columnList, 0);

                Map<String, Map<String, BigDecimal>> mapaWynikow = new HashMap();
                Map<String, BigDecimal> sumaMiesiacMap;

                for(Object[] row : result) {
                    if(row[4] == null) {
                        continue;
                    }
                    BigDecimal cena = new BigDecimal((double)row[1]);
                    BigDecimal ilosc = new BigDecimal((int)row[3]);
                    BigDecimal kosztDostawy = new BigDecimal((double)row[4]);
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime((Date)row[2]);
                    int rok = calendar.get(Calendar.YEAR);
                    int miesiac = calendar.get(Calendar.MONTH);
                    
                    BigDecimal wynik = BigDecimal.ZERO;
                    if(mapaWynikow.get(""+rok) != null) {
                        sumaMiesiacMap = mapaWynikow.get(""+rok);
                        if(mapaWynikow.get(""+rok).get(""+miesiac) != null) {
                            wynik = mapaWynikow.get(""+rok).get(""+miesiac);
                        }                
                    } else {
                        sumaMiesiacMap = new HashMap();
                    }

                    wynik = wynik.add(cena.multiply(ilosc).add(kosztDostawy).setScale(2, RoundingMode.HALF_UP));
                    sumaMiesiacMap.put(""+miesiac, wynik);
                    
                    System.out.println("SUMA " + miesiac + ": " + " + " + wynik);
                    
                    mapaWynikow.put(""+rok, sumaMiesiacMap);            
                }  

                tableResultModel = new Object[mapaWynikow.size()][SaleSummaryTableStruct.values().length];
                
                Iterator<Entry<String,Map<String, BigDecimal>>> it = mapaWynikow.entrySet().iterator();
                //while(it.hasNext()) {
                    //tableResultModel[it.] = it.next().getKey();
                //}
                
                
                
                //for(int i=0; i<mapaWynikow.size(); i++) {
                    
                    
                //}
                
                //Sortowanie       
                for(Entry<String,Map<String, BigDecimal>> entry : mapaWynikow.entrySet()) {
                    //tableResultModel[] = "Rok " + entry.getKey();
                    report += "Rok " + entry.getKey() + "\n";
                    for(Entry<String, BigDecimal> entryRow : entry.getValue().entrySet()) {
                        report += entryRow.getKey() + ": " + entryRow.getValue() + "\n";
                    }
                }
                
                columnNames = new String [SaleSummaryTableStruct.values().length];
                break;
            }
                
            case SUMA_SPRZEDAZY_TEMP:
            {
                DefaultTableModel orders = new DefaultTableModel(null, OrdersStruct.values());
                String select = Sql.getSelectQuery("orders_temp", OrdersStruct.values());
                SqlConnector.doSelectQuery(select, OrdersStruct.values(), orders);
                
                DefaultTableModel items_out = new DefaultTableModel(null, ItemsOutStruct.values());
                select = Sql.getSelectQuery("items_out_temp", ItemsOutStruct.values());
                SqlConnector.doSelectQuery(select, ItemsOutStruct.values(), items_out);
                
                Map<String, BigDecimal> sumaMiesiac = new HashMap();
                
                //PETLA ORDERS
                for(int i=0; i<orders.getRowCount(); i++) {
                    Object orderId = orders.getValueAt(i, orders.findColumn(OrdersStruct.ID.toString()));
                    String data = ""+orders.getValueAt(i, orders.findColumn(OrdersStruct.PAYMENT_DATE.toString()));
                    data = data.substring(0, 7);
                    BigDecimal przesylka = new BigDecimal(""+orders.getValueAt(i, orders.findColumn(OrdersStruct.SHIPMENT_COST.toString())));
                    String typEwidencji = ""+orders.getValueAt(i, orders.findColumn(OrdersStruct.RECORD_TYPE.toString()));
                    BigDecimal sumaOrder = BigDecimal.ZERO;
                    if(typEwidencji.toUpperCase().equals("EWIDENCJA")) {
                        sumaOrder = przesylka;
                        for(int item =0; item<items_out.getRowCount(); item++) {                       
                            if(orderId.equals(items_out.getValueAt(item, items_out.findColumn(ItemsOutStruct.ORDER_ID.toString())))) {
                                BigDecimal ilosc = new BigDecimal(""+items_out.getValueAt(item, items_out.findColumn(ItemsOutStruct.ILOSC.toString())));
                                BigDecimal cenaSprzedazy = new BigDecimal(""+items_out.getValueAt(item, items_out.findColumn(ItemsOutStruct.CENA_DETALICZNA.toString())));
                                sumaOrder = sumaOrder.add((ilosc.multiply(cenaSprzedazy).setScale(2, RoundingMode.HALF_UP)));
                                //System.out.println("SUMA " + data + ": " + przesylka + " + " + ilosc + " * " + cenaSprzedazy + " = " + sumaOrder);
                            }     
                        }
                    }
                    
                    if(sumaMiesiac.get(data) != null) {
                        sumaOrder = sumaOrder.add(sumaMiesiac.get(data));
                    }
                    System.out.println("SUMA " + data + ": " + orderId + " + " + sumaOrder);
                    
                    sumaMiesiac.put(data, sumaOrder);      
                    
                    
                }

                
                
                for(Entry entry : sumaMiesiac.entrySet()) {
                    
                    System.out.println("SUMA " + entry.getKey() + " | " + entry.getValue());
                }
                break;
            }
            case MONTH_SALE_SUMMARY: {
                String[] columntable = { "TYP", "MIESIAC", "ZYSK", "CENA_SPRZEDAZY", "ALLEGRO", "CALOSC", "CENA_ZAKUPU", "RABAT", "WIENIEK" };
                reportModel = new DefaultTableModel(null, columntable);
                Map<String, Map<String, Map<String, BigDecimal>>> raport = new HashMap();
                
                DefaultTableModel orders = new DefaultTableModel(null, OrdersStruct.values());
                String select = Sql.getSelectQuery("orders", OrdersStruct.values());
                SqlConnector.doSelectQuery(select, OrdersStruct.values(), orders);
                
                DefaultTableModel items_out = new DefaultTableModel(null, ItemsOutStruct.values());
                select = Sql.getSelectQuery("items_out", ItemsOutStruct.values());
                SqlConnector.doSelectQuery(select, ItemsOutStruct.values(), items_out);

                for(int i=0; i<orders.getRowCount(); i++) {
                    Map<String, Map<String, BigDecimal>> miesiac = new HashMap();                    
                    Map<String, BigDecimal> parametryMiesieczne = new HashMap();
                    
                    Object orderId = orders.getValueAt(i, orders.findColumn(OrdersStruct.ID.toString()));
                     
                    
                    String typEwidencji = ""+orders.getValueAt(i, orders.findColumn(OrdersStruct.RECORD_TYPE.toString()));                    ;
                    if(raport.get(typEwidencji) != null) {
                        miesiac = raport.get(typEwidencji);
                    }
                    
                    String data = ""+orders.getValueAt(i, orders.findColumn(OrdersStruct.PAYMENT_DATE.toString()));
                    data = data.substring(0, 7);
                    if(miesiac.get(data) != null) {
                        parametryMiesieczne = miesiac.get(data);
                    }
                    
                    for(int item =0; item<items_out.getRowCount(); item++) { 
                        if(orderId.equals(items_out.getValueAt(item, items_out.findColumn(ItemsOutStruct.ORDER_ID.toString())))) {
                            BigDecimal ilosc = new BigDecimal(""+items_out.getValueAt(item, items_out.findColumn(ItemsOutStruct.ILOSC.toString())));
                            BigDecimal cenaSprzedazy = new BigDecimal(""+items_out.getValueAt(item, items_out.findColumn(ItemsOutStruct.CENA_DETALICZNA.toString()))).multiply(ilosc);
                            BigDecimal cenaZakupu = new BigDecimal(""+items_out.getValueAt(item, items_out.findColumn(ItemsOutStruct.CENA_HURTOWA.toString()))).multiply(ilosc);
                            BigDecimal rabat = new BigDecimal(""+items_out.getValueAt(item, items_out.findColumn(ItemsOutStruct.RABAT.toString())));
                            BigDecimal zysk = (cenaSprzedazy.add((cenaZakupu.negate()))).multiply(new BigDecimal("0.66")).add(rabat);
                            BigDecimal allegro = BigDecimal.ZERO;
                            BigDecimal calosc;
                            if("TAK".equals(orders.getValueAt(i, orders.findColumn(OrdersStruct.ALLEGRO_FLAG.toString())))) {
                                allegro = cenaSprzedazy.multiply(new BigDecimal("0.08")).multiply(new BigDecimal("0.66"));
                                calosc = zysk.add(allegro.negate());
                            } else {
                                calosc = zysk;
                            }
                            
                            BigDecimal wienik = calosc.multiply(new BigDecimal("0.33"));                            
                            
                            if(parametryMiesieczne.get("CENA_ZAKUPU") != null) {
                                cenaZakupu = cenaZakupu.add(parametryMiesieczne.get("CENA_ZAKUPU"));
                                
                            }
                            parametryMiesieczne.put("CENA_ZAKUPU", cenaZakupu.setScale(2, RoundingMode.HALF_UP));

                            
                            if(parametryMiesieczne.get("CENA_SPRZEDAZY") != null) {
                                cenaSprzedazy = cenaSprzedazy.add(parametryMiesieczne.get("CENA_SPRZEDAZY"));
                            }
                            parametryMiesieczne.put("CENA_SPRZEDAZY", cenaSprzedazy.setScale(2, RoundingMode.HALF_UP));

                            
                            if(parametryMiesieczne.get("ZYSK") != null) {
                                zysk = zysk.add(parametryMiesieczne.get("ZYSK"));
                            }
                            parametryMiesieczne.put("ZYSK", zysk.setScale(2, RoundingMode.HALF_UP));
     
                            
                            if(parametryMiesieczne.get("ALLEGRO") != null) {
                                allegro = allegro.add(parametryMiesieczne.get("ALLEGRO"));
                            }
                            parametryMiesieczne.put("ALLEGRO", allegro.setScale(2, RoundingMode.HALF_UP));
       
                            
                            if(parametryMiesieczne.get("CALOSC") != null) {
                                calosc = calosc.add(parametryMiesieczne.get("CALOSC"));
                            }
                            parametryMiesieczne.put("CALOSC", calosc.setScale(2, RoundingMode.HALF_UP));
     
                            
                            if(parametryMiesieczne.get("WIENIEK") != null) {
                                wienik = wienik.add(parametryMiesieczne.get("WIENIEK"));
                            }
                            parametryMiesieczne.put("WIENIEK", wienik.setScale(2, RoundingMode.HALF_UP));
       
                            
                            if(parametryMiesieczne.get("RABAT") != null) {
                                rabat = rabat.add(parametryMiesieczne.get("RABAT"));
                            }
                            parametryMiesieczne.put("RABAT", rabat.setScale(2, RoundingMode.HALF_UP));
 
                            
                            
                        }       
                    }

                    miesiac.put(data, parametryMiesieczne);

                    raport.put(typEwidencji.toUpperCase(), miesiac);
                    
                    
                }
                
                //Log.log("RAPORT: " + raport);
                for(Entry<String, Map<String, Map<String, BigDecimal>>> entry : raport.entrySet()) {
                    Object[] row = new Object[9];
                    String typ = entry.getKey();
                    row[0] = typ;
                    Map<String, Map<String, BigDecimal>> miesiac = entry.getValue();   
                    for(Entry<String, Map<String, BigDecimal>> miech : miesiac.entrySet()) {                        
                        row[1] = miech.getKey();                        
                        int b = 2;
                        for(Entry<String, BigDecimal> param : miech.getValue().entrySet()) {
                            row[b] = param.getValue();
                            b++;
                        }
                        reportModel.addRow(row);
                    }
                   
                }
                break;
            }
            default: reportResultField.setText("WYBRANY TYP RAPORTU NIE JEST OBSØUGIWANY");
                return;

        }
        reportResultTable.setModel(reportModel);
        
        
        //Wyswietlenie Wyniku
        reportResultField.setText(report);
       
        //reportResultTable.setModel(new DefaultTableModel(tableResultModel, columnNames));
        reportResultTable.repaint(); 
    }//GEN-LAST:event_generateReportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateReport;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea reportResultField;
    private javax.swing.JTable reportResultTable;
    private javax.swing.JComboBox reportType;
    // End of variables declaration//GEN-END:variables
}
