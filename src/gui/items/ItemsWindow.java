/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.items;

import gui.Frame;
import gui.Window;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.table.DefaultTableModel;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;
import sqlconnector.SqlWhereStruct;

/**
 *
 * @author User
 */
public class ItemsWindow extends javax.swing.JInternalFrame implements Window {

    private ItemsViewType viewType = ItemsViewType.VIEW;
    private Frame parent = null;
    
    /**
     * Creates new form ItemsWindow
     */
    public ItemsWindow() {
        super("ITEMS", true,true,true,true);
        initComponents();
        onInit();
        refreshTable();
    }
    
    public ItemsWindow(Frame parent, ItemsViewType viewType) {
        super("ITEMS", true,true,true,true);
        this.viewType = viewType;
        this.parent = parent;
        initComponents();
        onInit();
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        itemsTable = new javax.swing.JTable();
        itemHistory = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        itemName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        itemCode = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        onlyAvailableFilter = new javax.swing.JRadioButton("Only Available", true);
        select = new javax.swing.JButton();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        itemsTable.setModel(new javax.swing.table.DefaultTableModel(
            null,
            ItemsStruct.getValuesAsString()
        ));
        jScrollPane1.setViewportView(itemsTable);

        itemHistory.setText("SHOW ITEM HISTORY");
        itemHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHistoryActionPerformed(evt);
            }
        });

        closeButton.setText("CLOSE WINDOW");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Name");

        itemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameActionPerformed(evt);
            }
        });
        itemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                itemNameKeyTyped(evt);
            }
        });

        jLabel2.setText("Code");

        itemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCodeActionPerformed(evt);
            }
        });
        itemCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                itemCodeKeyTyped(evt);
            }
        });

        jButton1.setText("UPDATE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        onlyAvailableFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyAvailableFilterActionPerformed(evt);
            }
        });

        select.setText("SELECT");
        if(viewType == ItemsViewType.VIEW) {
            select.setVisible(false);
        } else {
            select.setVisible(true);
        }
        select.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                selectMouseReleased(evt);
            }
        });
        select.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(itemHistory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(onlyAvailableFilter)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(onlyAvailableFilter)
                    .addComponent(jLabel1)
                    .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemHistory)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(select))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void itemHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHistoryActionPerformed
        int selectedRow = itemsTable.getSelectedRow();
        if(selectedRow > -1) {
            String itemCode = ""+itemsTable.getValueAt(selectedRow, itemsTable.getColumn(ItemsStruct.ITEM_CODE.toString()).getModelIndex());
            ItemHistoryWindow itemsHistory = new ItemHistoryWindow(this, itemCode);
            this.setWindowState(false);
            Component added = this.add(itemsHistory, 0);
            this.repaint();    
            added.repaint();
            //itemsHistory.show();
            //itemsHistory.moveToFront();
            //this.validate();
            //itemHistory.setVisible(false);
            //itemHistory.setVisible(true);
        }
    }//GEN-LAST:event_itemHistoryActionPerformed

    private void itemNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemNameKeyTyped
        refreshTable();      
    }//GEN-LAST:event_itemNameKeyTyped

    private void itemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameActionPerformed

    private void itemCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemCodeKeyTyped
        refreshTable(); 
    }//GEN-LAST:event_itemCodeKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setItemActualAmount();
        refreshTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void onlyAvailableFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyAvailableFilterActionPerformed
        refreshTable();              
    }//GEN-LAST:event_onlyAvailableFilterActionPerformed

    private void itemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemCodeActionPerformed

    private void selectMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectMouseReleased
        Object selectedItem = itemsTable.getValueAt(itemsTable.getSelectedRow(), itemsTable.getColumn(ItemsStruct.ITEM_CODE.toString()).getModelIndex());
        this.setResult(selectedItem);
        parent.setWindowState(true);
        this.dispose();
    }//GEN-LAST:event_selectMouseReleased

    private void selectStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_selectStateChanged

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        if(parent != null) {
            parent.setWindowState(true);
        }
    }//GEN-LAST:event_formInternalFrameClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField itemCode;
    private javax.swing.JButton itemHistory;
    private javax.swing.JTextField itemName;
    private javax.swing.JTable itemsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton onlyAvailableFilter;
    private javax.swing.JButton select;
    // End of variables declaration//GEN-END:variables

    private void refreshTable() {
        List<Map<SqlWhereStruct, Object>> whereMap = new ArrayList();
        boolean isAvailableChecked = onlyAvailableFilter.isSelected();
        if(isAvailableChecked) {
            whereMap.add(Sql.getWhereMap(ItemsStruct.ITEM_ACTUAL_AMOUNT.toString(), ""+0, ">", "AND"));
        }        
        String enteredCode = itemCode.getText();
        if(!enteredCode.equals("")) {  
            whereMap.add(Sql.getWhereMap(ItemsStruct.ITEM_CODE.toString(),  "%" + enteredCode + "%", "LIKE", "AND"));
        }
        String enteredName = itemName.getText();
        if(!enteredName.equals("")) {        
            whereMap.add(Sql.getWhereMap(ItemsStruct.ITEM_NAME.toString(),  "%" + enteredName + "%", "LIKE", "AND"));
        }
        
        DefaultTableModel model = new DefaultTableModel(null, ItemsStruct.getValuesAsString());
        //String query = Sql.getSelectQuery(ItemsStruct.getTableName(), ItemsStruct.values());
        String select = Sql.getSelectQuery(ItemsStruct.getTableName(), ItemsStruct.values(), whereMap);

        SqlConnector.doSelectQuery(select, ItemsStruct.values(), model);
        
        itemsTable.setModel(model);
        itemsTable.repaint();
    }

    private void refreshTable(Map map) {
        DefaultTableModel model = new DefaultTableModel(null, ItemsStruct.getValuesAsString());
        String query = Sql.getSelectQuery(ItemsStruct.getTableName(), ItemsStruct.values(), map);

        SqlConnector.doSelectQuery(query, ItemsStruct.values(), model);
        
        itemsTable.setModel(model);
        itemsTable.repaint();  
    }
    
    private void onInit() {
        this.setVisible(true);
        this.show();
    }

    @Override
    public void setWindowState(boolean enabled) {
        itemsTable.setEnabled(enabled);
        jScrollPane1.setEnabled(enabled);
        itemHistory.setEnabled(enabled);
        closeButton.setEnabled(enabled);
    }

    @Override
    public void setResult() {
        
    }

    @Override
    public void setResult(Object singleResult) {
        parent.setResult(singleResult);
    }
    
    public void setItemActualAmount() {
        //actualAmount dla  kodu w items_in
        // Po calej tabeli
        DefaultTableModel model = new DefaultTableModel(null, ItemsInStruct.getValuesAsString());
        String query = Sql.getSelectQuery(ItemsInStruct.getTableName(), ItemsInStruct.values());
        SqlConnector.doSelectQuery(query, ItemsInStruct.values(), model);
        
        Map<Object, Integer> map = new HashMap();
        for(int i=0; i<model.getRowCount(); i++) {
            Object itemCode = model.getValueAt(i, model.findColumn(ItemsInStruct.ITEM_CODE.toString()));
            int itemActualAmount = (int)model.getValueAt(i, model.findColumn(ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString()));
            
            if(map.get(itemCode) != null) {
                int value = map.get(itemCode);
                value = value + itemActualAmount;
                map.put(itemCode, value); 
            } else {
                map.put(itemCode, itemActualAmount);     
            }                   
        }
        
        for(Entry entry : map.entrySet()) {
            String update = Sql.getUpdateQuery(ItemsStruct.getTableName(), Sql.getUpdateMap(ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString(), entry.getValue()), Sql.getWhereMap(ItemsInStruct.ITEM_CODE.toString(), "'" + entry.getKey() + "'", "=", ""));
            if(!SqlConnector.doUpdateQuery(update)) {
                return;
            }
        }
    }

    @Override
    public void setResult(Map<Object, String> resultMap) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void doAction(String action) {
        
    }
}
