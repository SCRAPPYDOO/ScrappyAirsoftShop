/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.items;

import database.databaseStruct.TableStructInterface;
import gui.Window;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;

/**
 *
 * @author User
 */
public class ItemReturnWindow extends javax.swing.JInternalFrame {

    /**
     * Creates new form ItemReturnWindow
     */
    
    private Map<ItemReturnParam, Object> params;
    private Window parent;
    
    public ItemReturnWindow() {
        super("ITEM RETURN", true, true, true);        
        initComponents();
        onInit();
    }
    
    public ItemReturnWindow(Window parent, Map<ItemReturnParam, Object> params) {
        super("ITEM RETURN", true, true, true); 
        this.parent = parent;
        initComponents();
        onInit();
        setParams(params);
        
    }

    private void onInit() {        
        this.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addReturn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        itemCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        itemMaxAmount = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        addReturn.setText("ADD RETURN");
        addReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReturnActionPerformed(evt);
            }
        });

        jLabel1.setText("Item Code");

        itemCode.setEnabled(false);

        jLabel2.setText("Amount");

        amount.setText("0");

        itemMaxAmount.setEnabled(false);

        jLabel3.setText("Max Amount");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemMaxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(addReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addReturn)
                    .addComponent(jLabel1)
                    .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemMaxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReturnActionPerformed
        BigDecimal enteredAmount = new BigDecimal(amount.getText());
        if(enteredAmount.compareTo(BigDecimal.ZERO) == -1 || enteredAmount.compareTo(BigDecimal.ZERO) == 0) {
            return;
        }
        
        Map<TableStructInterface, Object> values = new HashMap();
        values.put(ItemsOutStruct.ORDER_ID,params.get(ItemReturnParam.ITEM_ORDER));
        values.put(ItemsOutStruct.KOD_PRODUKTU,params.get(ItemReturnParam.ITEM_CODE));
        values.put(ItemsOutStruct.ILOSC,enteredAmount.negate());
        values.put(ItemsOutStruct.CENA_DETALICZNA,params.get(ItemReturnParam.ITEM_DETAL_PRICE));
        values.put(ItemsOutStruct.CENA_HURTOWA,params.get(ItemReturnParam.ITEM_HURT_PRICE));
        values.put(ItemsOutStruct.RABAT,new BigDecimal(params.get(ItemReturnParam.ITEM_RABAT).toString()));
        values.put(ItemsOutStruct.ITEM_ID,params.get(ItemReturnParam.ITEM_ID));
        String insert = Sql.getInsertQuery(ItemsOutStruct.getTableName(), values);
        if(SqlConnector.doInsertQuery(insert)) {        
            String updateAmount = Sql.getUpdateQuery(ItemsInStruct.getTableName(), Sql.getUpdateMap(ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString(), ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString() + " - " + enteredAmount.negate()), Sql.getWhereMap(ItemsInStruct.ITEM_ID.toString(), params.get(ItemReturnParam.ITEM_ID).toString(), "=", ""));
            SqlConnector.doUpdateQuery(updateAmount);
            this.dispose();
            parent.setWindowState(true);
        }
    }//GEN-LAST:event_addReturnActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        parent.setWindowState(true);
    }//GEN-LAST:event_formInternalFrameClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addReturn;
    private javax.swing.JTextField amount;
    private javax.swing.JTextField itemCode;
    private javax.swing.JTextField itemMaxAmount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    private void setParams(Map<ItemReturnParam, Object> params) {
        this.params = params;
        for (Entry<ItemReturnParam, Object> entry : params.entrySet()) {
            switch(entry.getKey()) {
                case ITEM_CODE: itemCode.setText(entry.getValue().toString()); break;
                case ITEM_AMOUNT: itemMaxAmount.setText(entry.getValue().toString()); break;                                    
            }
        }
    }
    
    public static Map<ItemReturnParam, Object> getParameteresMap() {
        return new HashMap();
    }
}
