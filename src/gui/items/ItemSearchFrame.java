/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.items;

import database.databaseStruct.TableStructInterface;
import gui.Window;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;
import sqlconnector.SqlJoinConditionStruct;
import sqlconnector.SqlWhereStruct;

public class ItemSearchFrame extends javax.swing.JInternalFrame {

    private TableStructInterface[] columnList = { ItemsInStruct.ITEM_ID, ItemsInStruct.ITEM_CODE, ItemsStruct.ITEM_NAME, ItemsInStruct.ITEM_PRICE, ItemsInStruct.ITEM_ACTUAL_AMOUNT}; 
    private Window parent;
    private DefaultTableModel orderViewTableModel;
    
    //Not Used
    public ItemSearchFrame() {
        super("ITEM SEARCH WINDOW", true, true, true, true);
        initComponents();
        onInit();
    }

    public ItemSearchFrame(Window parent) {
        super("ITEM SEARCH WINDOW", true, true, true, true);
        this.parent = parent;
        initComponents();
        onInit();
    }
    
    public ItemSearchFrame(Window parent, DefaultTableModel model) {
        super("ITEM SEARCH WINDOW", true, true, true, true);
        this.parent = parent;
        this.orderViewTableModel = model;
        initComponents();
        onInit();
    }
    
    public ItemSearchFrame(Window parent, String action) {
        super("ITEM SEARCH WINDOW", true, true, true, true);
        this.parent = parent;
        initComponents();
        onInit();
    }
    
    private void onInit() {
        this.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResultTable = new javax.swing.JTable();
        itemCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        itemName = new javax.swing.JTextField();
        selectButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        amountWarning = new javax.swing.JLabel();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setText("ITEM CODE");

        searchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            null,
            columnList
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchResultTable.setColumnSelectionAllowed(true);
        searchResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                searchResultTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(searchResultTable);
        searchResultTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        itemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCodeActionPerformed(evt);
            }
        });
        itemCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemCodeKeyReleased(evt);
            }
        });

        jLabel2.setText("ITEM NAME");

        itemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameActionPerformed(evt);
            }
        });
        itemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemNameKeyReleased(evt);
            }
        });

        selectButton.setText("SELECT");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Amount");

        amount.setText("0");
        amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountActionPerformed(evt);
            }
        });
        amount.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                amountPropertyChange(evt);
            }
        });
        amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountKeyReleased(evt);
            }
        });

        jButton1.setText("CLOSE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        amountWarning.setForeground(new java.awt.Color(255, 0, 0));
        amountWarning.setVisible(false);
        amountWarning.setText("Amount need to be lowest or equals ITEM ACTUAL AMOUNT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(41, 41, 41)
                .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(amountWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(293, 293, 293))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amountWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemCodeActionPerformed

    private void itemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        int selectedRowId = searchResultTable.getSelectedRow();        
        
        Object[] row = new Object[orderViewTableModel.getColumnCount()];                
        
        int itemId = (int)searchResultTable.getValueAt(selectedRowId, searchResultTable.getColumn(ItemsInStruct.ITEM_ID.toString()).getModelIndex());
        int actualAmount = (int)searchResultTable.getValueAt(selectedRowId, searchResultTable.getColumn(ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString()).getModelIndex());
        int count = actualAmount;
        
        for(int i=0; i<orderViewTableModel.getRowCount(); i++) {
            int alreadyAddedItemId = (int)orderViewTableModel.getValueAt(i, orderViewTableModel.findColumn(ItemsOutStruct.ITEM_ID.toString()));
            int alreadyAddedAmount = (int)orderViewTableModel.getValueAt(i, orderViewTableModel.findColumn(ItemsOutStruct.ILOSC.toString()));                  
            if(itemId == alreadyAddedItemId) {                
                count -= alreadyAddedAmount;               
                if(count < Integer.parseInt(amount.getText())) {
                    int left = actualAmount - count;
                    amountWarning.setText("WARNING ! " + left + " Already Added, Only " + count + " Left");
                    amountWarning.setVisible(true);
                    return;
                }
            }            
        }
        
        if(validateAmount()) {
            return;
        }

        for(int i=0; i<orderViewTableModel.getColumnCount(); i++) {
            switch(orderViewTableModel.getColumnName(i)) {                
                case "KOD_PRODUKTU": 
                    row[i] = searchResultTable.getValueAt(selectedRowId, searchResultTable.getColumn(ItemsInStruct.ITEM_CODE.toString()).getModelIndex());
                    break;
                case "CENA_HURTOWA":
                    row[i] = searchResultTable.getValueAt(selectedRowId, searchResultTable.getColumn(ItemsInStruct.ITEM_PRICE.toString()).getModelIndex());
                    break;
                case "ILOSC": 
                    row[i] = Integer.parseInt(amount.getText()); 
                    break;
                case "CENA_DETALICZNA": row[i] = new BigDecimal("0.0"); break;
                case "RABAT": row[i] = new BigDecimal("0.0"); break;
                case "ITEM_ID": row[i] = itemId;
                    break;
            }
        }

        orderViewTableModel.addRow(row);

        this.dispose();
    }//GEN-LAST:event_selectButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean validateAmount() {
        int selectedRowId = searchResultTable.getSelectedRow();
        int maxAmount = (int)searchResultTable.getValueAt(selectedRowId, searchResultTable.getColumn(ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString()).getModelIndex());
        
        if(Integer.parseInt(amount.getText()) > maxAmount || Integer.parseInt(amount.getText()) <= 0) {
            amountWarning.setVisible(true);
            return true;
        } else {            
            amountWarning.setVisible(false);
            return false;
        }  
    }
    
    private void amountPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_amountPropertyChange

    }//GEN-LAST:event_amountPropertyChange

    private void amountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountKeyReleased
        validateAmount();
    }//GEN-LAST:event_amountKeyReleased

    private void amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountActionPerformed

    private void searchResultTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchResultTableMouseReleased
        validateAmount();
    }//GEN-LAST:event_searchResultTableMouseReleased

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        parent.setWindowState(true);     
    }//GEN-LAST:event_formInternalFrameClosed

    private void itemCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemCodeKeyReleased
        updateTable();
    }//GEN-LAST:event_itemCodeKeyReleased

    private void itemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemNameKeyReleased
        updateTable();
    }//GEN-LAST:event_itemNameKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private javax.swing.JLabel amountWarning;
    private javax.swing.JTextField itemCode;
    private javax.swing.JTextField itemName;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable searchResultTable;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables

    private void updateTable() {
        String itemCodeSearch = itemCode.getText();
        String itemNameSearch = itemName.getText();

        List<Map<SqlWhereStruct, Object>> params = new ArrayList();

        if(!itemCodeSearch.equals("")) {
            params.add(Sql.getWhereMap(ItemsInStruct.getValueWithTableName(ItemsInStruct.ITEM_ACTUAL_AMOUNT), "0", ">", "AND"));
            params.add(Sql.getWhereMap(ItemsInStruct.getValueWithTableName(ItemsInStruct.ITEM_CODE), "%"+ itemCodeSearch +"%", "LIKE", "OR"));
        }
        
        if(!itemNameSearch.equals("")) {
            params.add(Sql.getWhereMap(ItemsInStruct.getValueWithTableName(ItemsInStruct.ITEM_ACTUAL_AMOUNT), "0", ">", "AND"));
            params.add(Sql.getWhereMap(ItemsStruct.getValueWithTableName(ItemsStruct.ITEM_NAME), "%"+ itemNameSearch +"%", "LIKE", ""));
        }

        if(params.size() < 1) {
            return;
        }
        
        Map<SqlJoinConditionStruct, TableStructInterface> joinCondition = new HashMap();
        joinCondition.put(SqlJoinConditionStruct.JOIN_LEFT, ItemsInStruct.ITEM_CODE);
        joinCondition.put(SqlJoinConditionStruct.JOIN_RIGHT, ItemsStruct.ITEM_CODE);

        String leftjoinQuery = Sql.getLeftJoinQuery(ItemsInStruct.getTableName(), ItemsStruct.getTableName(), columnList, joinCondition, params);

        String[] columnNames = { ItemsInStruct.ITEM_ID.toString(), ItemsInStruct.ITEM_CODE.toString(), ItemsStruct.ITEM_NAME.toString(), ItemsInStruct.ITEM_PRICE.toString(), ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString()};
        DefaultTableModel model = new DefaultTableModel(null, columnNames);
        SqlConnector.doSelectQuery(leftjoinQuery, columnList, model);
        searchResultTable.setModel(model);
        searchResultTable.repaint();
    }
}
