/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.orders;

import gui.items.ItemsInStruct;
import gui.items.ItemsOutStruct;
import database.databaseStruct.TableStructInterface;
import database.databaseStruct.WieniekTableStruct;
import gui.Window;
import gui.customers.CustomersWindow;
import gui.items.ItemReturnParam;
import gui.items.ItemReturnWindow;
import gui.items.ItemSearchFrame;
import java.awt.Component;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.table.DefaultTableModel;
import mail.MailSender;
import mail.MailMessage;
import postoffice.PackageType;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;
import utils.Log;


public class OrderViewWindow extends javax.swing.JInternalFrame implements Window{

    private OrderViewWindowType type;
    private Window parent;
    private OrderStatus oldOrderStatus;
    
    //set when orderState is changed
    private boolean isOrderStateChanged = false;
    
    public OrderViewWindow() {
        super("ORDER VIEW", true,true,true,true);
        initComponents();
        onInit();
    }

    OrderViewWindow(Window parent, OrderViewWindowType viewOrderWindowType) {
        super("ORDER VIEW", true,true,true,true);
        
        this.type = viewOrderWindowType;
        this.parent = parent;
        Log.log("kontrusktor " + viewOrderWindowType + " " + type);
        initComponents();
        onInit();
    }
       
    OrderViewWindow(Window parent, OrderViewWindowType viewOrderWindowType, Map<String, Object> properties) {
        super("ORDER VIEW", true,true,true,true);
        this.type = viewOrderWindowType;
        this.parent = parent;
        initComponents();
        onInit();
        setProperties(properties);  
    }
    
    private void setProperties(Map<String, Object> properties) {
        for(Entry<String, Object> entry : properties.entrySet()) {
            Object value = entry.getValue();
            Log.log("viewOrderWindowType " + entry.getKey() + " " + value);
            switch(entry.getKey()) {
                case "ID": orderID.setText(""+value); break;
                case "CUSTOMER_ID": buyerID.setText(""+value); break;
                case "ORDER_DATE": saleDate.setText(""+value); break;
                case "PAYMENT_DATE": paymentDate.setText(""+value); break;
                case "PAYMENT_TYPE": paymentMethod.setSelectedItem((String)value); break;
                case "PAYMENT_ID": paymentID.setText((String)value); break;
                case "PAYMENT_STATUS": paymentStatus.setSelectedItem((String)value); break;
                case "RECORD_TYPE": recordType.setSelectedItem((String)value); break;
                case "ALLEGRO_FLAG": allegro.setSelectedItem((String)value); break;
                case "SHIPMENT_TYPE":                     
                    if(value != null) {
                        shipmentType.setSelectedItem(PackageType.getPackageByName(value)); 
                    }
                    break;
                case "SHIPMENT_COST": shipmentCost.setText(""+value); break;
                case "SHIPMENT_OUR_COST": ourShipmentCost.setText(""+value); break;
                case "TRACKING_ID": trackingId.setText((String)value); break;
                case "ORDER_STATUS":
                    if(value != null) {
                        orderState.setSelectedItem(OrderStatus.getPackageByName(value)); 
                        oldOrderStatus = (OrderStatus) orderState.getSelectedItem();
                    }
                    break;    
            }
        }
        
        refreshOrdersItemTable();
    }

    private void setEnableFlag(boolean isNewOrder) {
        buyerIdSearchButon.setEnabled(isNewOrder);
    }
    
    private void onInit() {
        this.setResizable(true);
        boolean isNewOrder = OrderViewWindowType.NEW_ORDER == type;
        setEnableFlag(isNewOrder);   
        if(isNewOrder) {
            clearAllFields();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemsTable = new javax.swing.JTable();
        productCodeSearchButon = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        saleDate = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        paymentMethod = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        paymentID = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        paymentStatus = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        recordType = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        allegro = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        buyerID = new javax.swing.JTextField();
        buyerIdSearchButon = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        shipmentType = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        shipmentCost = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        ourShipmentCost = new javax.swing.JTextField();
        addNewOrderButton = new javax.swing.JButton();
        trackingId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        paymentDate = new javax.swing.JTextField();
        warningLabel = new javax.swing.JLabel();
        removeSelectedItemButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        orderID = new javax.swing.JTextField();
        sumAllValues = new javax.swing.JButton();
        summary = new javax.swing.JTextField();
        itemReturnButton = new javax.swing.JButton();
        orderState = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        itemsTable.setModel(new javax.swing.table.DefaultTableModel(
            null,
            ItemsOutStruct.valuesAsString()
        ));
        itemsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemsTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(itemsTable);

        productCodeSearchButon.setText("ADD ITEM");
        productCodeSearchButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productCodeSearchButonActionPerformed(evt);
            }
        });

        jLabel6.setText("Order Date");

        saleDate.setText(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
        saleDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleDateActionPerformed(evt);
            }
        });

        jLabel9.setText("Typ Płatności");

        paymentMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PayU", "DbNET", "Cash" }));
        paymentMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentMethodActionPerformed(evt);
            }
        });

        jLabel11.setText("ID Płatności");

        paymentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentIDActionPerformed(evt);
            }
        });

        jLabel26.setText("Status Płatności");

        paymentStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BRAK WPŁATY", "ZAPŁACONE", "WIENIEK" }));
        paymentStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentStatusActionPerformed(evt);
            }
        });

        jLabel25.setText("Typ Ewidencji");

        recordType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EWIDENCJA", "FAKTURA", "MAGAZYN", "STRATY" }));
        recordType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordTypeActionPerformed(evt);
            }
        });

        jLabel34.setText("Allegro");

        allegro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TAK", "NIE" }));

        jLabel23.setText("ID Kupujący");

        buyerID.setEnabled(false);
        buyerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyerIDActionPerformed(evt);
            }
        });

        buyerIdSearchButon.setText("SEARCH");
        buyerIdSearchButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyerIdSearchButonActionPerformed(evt);
            }
        });

        jLabel28.setText("Typ Dostawy");

        shipmentType.setModel(new javax.swing.DefaultComboBoxModel(PackageType.values()));
        shipmentType.setSelectedIndex(-1);
        shipmentType.setToolTipText("");
        shipmentType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shipmentTypeActionPerformed(evt);
            }
        });

        jLabel27.setText("Koszt Dostawy");

        shipmentCost.setText("0.0");
        shipmentCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shipmentCostActionPerformed(evt);
            }
        });

        jLabel29.setText("Nasz Koszt Dostawy");

        ourShipmentCost.setText("0.0");
        ourShipmentCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ourShipmentCostActionPerformed(evt);
            }
        });

        addNewOrderButton.setText(type == gui.orders.OrderViewWindowType.NEW_ORDER ? "ADD NEW ORDER" : "UPDATE ORDER");
        addNewOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewOrderButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Tracking ID");

        jLabel2.setText("Data Płatności");

        paymentDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentDateActionPerformed(evt);
            }
        });

        warningLabel.setForeground(new java.awt.Color(255, 0, 0));
        warningLabel.setText("WARNING !!");

        removeSelectedItemButton.setText("REMOVE SELECTED ITEM");
        removeSelectedItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectedItemButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Order ID");

        orderID.setEnabled(false);

        sumAllValues.setText("RAZEM");
        sumAllValues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumAllValuesActionPerformed(evt);
            }
        });

        itemReturnButton.setText("ITEM RETURN");
        itemReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemReturnButtonActionPerformed(evt);
            }
        });

        orderState.setModel(new javax.swing.DefaultComboBoxModel(OrderStatus.values()));
        orderState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                orderStateItemStateChanged(evt);
            }
        });
        orderState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                orderStateMouseReleased(evt);
            }
        });
        orderState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderStateActionPerformed(evt);
            }
        });

        jLabel4.setText("ORDER STATUS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addGap(18, 18, 18)
                                .addComponent(paymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(productCodeSearchButon)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(removeSelectedItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(23, 23, 23)
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(saleDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(paymentDate))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(paymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addGap(18, 18, 18)
                                    .addComponent(paymentID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel34)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(allegro, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(recordType, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(orderID, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(buyerID, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(buyerIdSearchButon))))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel29)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(orderState, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(trackingId)
                                            .addComponent(ourShipmentCost, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel28)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(shipmentType, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel27)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(shipmentCost, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(170, 170, 170)))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(228, 228, 228)
                                .addComponent(sumAllValues)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(summary, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 581, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addNewOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(saleDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25)
                            .addComponent(recordType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(paymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paymentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shipmentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(allegro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34)
                            .addComponent(shipmentCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buyerIdSearchButon)
                            .addComponent(buyerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23)
                            .addComponent(ourShipmentCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trackingId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(orderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addGap(18, 18, 18)
                .addComponent(warningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productCodeSearchButon)
                    .addComponent(removeSelectedItemButton)
                    .addComponent(sumAllValues)
                    .addComponent(summary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemReturnButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewOrderButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.getParent().setEnabled(true);
        this.dispose(); 
    }//GEN-LAST:event_closeButtonActionPerformed

    private void productCodeSearchButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productCodeSearchButonActionPerformed
        ItemSearchFrame itemSearch = new ItemSearchFrame(this, (DefaultTableModel)itemsTable.getModel());
        this.getContentPane().add(itemSearch, 0);
        this.repaint();
        this.setWindowState(false);
    }//GEN-LAST:event_productCodeSearchButonActionPerformed

    private void saleDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saleDateActionPerformed

    private void paymentMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentMethodActionPerformed
        if(paymentMethod.getSelectedItem().equals("Cash")) {
            paymentID.setText("0");
            shipmentType.setSelectedItem(PackageType.ODBIOR_OSOBISTY);
            shipmentCost.setText("0.0");
            ourShipmentCost.setText("0.0");
            shipmentType.setEnabled(false);
            shipmentCost.setEnabled(false);
            ourShipmentCost.setEnabled(false);
            trackingId.setEnabled(false);
        } else {
            shipmentType.setEnabled(true);
            shipmentCost.setEnabled(true);
            ourShipmentCost.setEnabled(true);
            trackingId.setEnabled(true);
            //paymentID.setText("");
        }

    }//GEN-LAST:event_paymentMethodActionPerformed

    private void paymentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentIDActionPerformed

    private void paymentStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentStatusActionPerformed

    private void recordTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordTypeActionPerformed
        if(recordType.getSelectedItem().equals("MAGAZYN") || recordType.getSelectedItem().equals("STRATY")) {
            allegro.setEnabled(false);
            allegro.setSelectedItem("NIE");
            if(recordType.getSelectedItem().equals("STRATY")) {
                buyerID.setText("8");
            }
        } else {
            allegro.setEnabled(true);
            allegro.setSelectedItem("TAK");
        }
    }//GEN-LAST:event_recordTypeActionPerformed

    private void buyerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buyerIDActionPerformed

    private void buyerIdSearchButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyerIdSearchButonActionPerformed
        CustomersWindow customerSearchFrame = new CustomersWindow(this);
        customerSearchFrame.setVisible(true);
        this.add(customerSearchFrame, 0);
        this.repaint();
    }//GEN-LAST:event_buyerIdSearchButonActionPerformed

    private void shipmentTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shipmentTypeActionPerformed
        String cost = PackageType.getPackageCost((PackageType)shipmentType.getSelectedItem());
        ourShipmentCost.setText(cost);
        
        if((PackageType)shipmentType.getSelectedItem() != PackageType.ODBIOR_OSOBISTY) {
            shipmentCost.setEnabled(true);
            ourShipmentCost.setEnabled(true);
            trackingId.setEnabled(true);
        } else {
            shipmentCost.setText("0.0");
            ourShipmentCost.setText("0.0");
            shipmentCost.setEnabled(false);
            ourShipmentCost.setEnabled(false);
            trackingId.setEnabled(false);
        }
            
    }//GEN-LAST:event_shipmentTypeActionPerformed

    private void addNewOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewOrderButtonActionPerformed
        Map<TableStructInterface, Object> insertMap = new HashMap();
        
        if(!validateFields()) {
            return;
        }
        
        OrderStatus orderStateObject = (OrderStatus) orderState.getSelectedItem();
        List<Map<String, String>> itemList = new ArrayList();
        
        
        insertMap.put(OrdersStruct.CUSTOMER_ID, buyerID.getText());
        insertMap.put(OrdersStruct.ORDER_DATE, saleDate.getText());
        
        if(!paymentDate.getText().equals("null") && paymentDate.getText().length() > 0) {            
            insertMap.put(OrdersStruct.PAYMENT_DATE, paymentDate.getText());
        }
        insertMap.put(OrdersStruct.PAYMENT_TYPE, paymentMethod.getSelectedItem().toString());
        insertMap.put(OrdersStruct.PAYMENT_ID, paymentID.getText());
        insertMap.put(OrdersStruct.PAYMENT_STATUS, paymentStatus.getSelectedItem().toString());
        insertMap.put(OrdersStruct.RECORD_TYPE, recordType.getSelectedItem().toString());
        insertMap.put(OrdersStruct.ALLEGRO_FLAG, allegro.getSelectedItem().toString());
        insertMap.put(OrdersStruct.ORDER_STATUS, orderStateObject.toString());
        
        if(shipmentType.getSelectedIndex() != -1) {           
            insertMap.put(OrdersStruct.SHIPMENT_TYPE, shipmentType.getSelectedItem().toString());
        }
        
        if(!shipmentCost.getText().equals("")) {
            insertMap.put(OrdersStruct.SHIPMENT_COST, new BigDecimal(shipmentCost.getText().replace(",", ".")));   
        }
        
        if(!ourShipmentCost.getText().equals("")) {
            insertMap.put(OrdersStruct.SHIPMENT_OUR_COST, new BigDecimal(ourShipmentCost.getText().replace(",", ".")));
        }
        
        String trackingIdNumber = trackingId.getText();
        insertMap.put(OrdersStruct.TRACKING_ID, trackingIdNumber);
        
        String newOrderSql;
        
        if(OrderViewWindowType.VIEW == type) {

            insertMap.put(OrdersStruct.ID, orderID.getText());
            newOrderSql = Sql.getReplaceIntoQuery(OrdersStruct.getTableName(), insertMap);
        } else {            
            newOrderSql = Sql.getInsertQuery(OrdersStruct.getTableName(), insertMap);

        }
        
        if(!SqlConnector.doInsertQuery(newOrderSql)) {
            return;
        }
        
        Object addedOrderID;
        if(OrderViewWindowType.VIEW == type) {
            addedOrderID = orderID.getText();
        } else {
            addedOrderID = SqlConnector.getLastIdFromTableByColumn(OrdersStruct.getTableName(), OrdersStruct.ID);            
        }
         
        
        if(OrderViewWindowType.VIEW != type && paymentStatus.getSelectedItem().toString().equals("WIENIEK")) {
            Map<TableStructInterface, Object> wieniekValues = new HashMap();

            wieniekValues.put(WieniekTableStruct.ID_SPRZEDAZY, addedOrderID);
            wieniekValues.put(WieniekTableStruct.OPIS, new Date() + " " + buyerID.getText());

            String wieniekInsert = Sql.getInsertQuery(WieniekTableStruct.getTableName(), wieniekValues);
            if(!SqlConnector.doInsertQuery(wieniekInsert)) {
                return;
            }
        }
        
        //DODANIE DO OUTCOMES ITEMOW  PODPIETYCH DO DANEGO ZAMOWIENIA
        DefaultTableModel model = (DefaultTableModel)itemsTable.getModel();       
        
        for(int i=0; i<model.getRowCount(); i++) {
            Map<TableStructInterface, Object> values = new HashMap();
            
            //Mapa na potrzeby meila 
            Map<String, String> item = new HashMap();  
            
            for(TableStructInterface struct : ItemsOutStruct.values()) {
                Object value = model.getValueAt(i, model.findColumn(struct.toString()));
                if(value != null) {
                    item.put(struct.toString(), value.toString());
                    values.put(struct, value);
                }
            }
            
            if(values.isEmpty()) {
                return;
            }
            
            values.put(ItemsOutStruct.ORDER_ID, addedOrderID); 
            
            String sqlInsert = Sql.getReplaceIntoQuery(ItemsOutStruct.getTableName(), values);
            if(!SqlConnector.doInsertQuery(sqlInsert)) {
                return;
            }
            
            //ZAKTUALIZOWANIE AKTUALNEGO STANU  
            Object id = itemsTable.getValueAt(i, itemsTable.getColumn(ItemsOutStruct.ID.toString()).getModelIndex());
            Object itemId = itemsTable.getValueAt(i, itemsTable.getColumn(ItemsOutStruct.ITEM_ID.toString()).getModelIndex());
            Object itemAmount = itemsTable.getValueAt(i, itemsTable.getColumn(ItemsOutStruct.ILOSC.toString()).getModelIndex());
            
            if(id == null && !itemId.equals("0")) {
                String incomesUpdate = Sql.getUpdateQuery(ItemsInStruct.getTableName(), Sql.getUpdateMap(ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString(), ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString() +"-" + itemAmount), Sql.getWhereMap(ItemsInStruct.ITEM_ID.toString(), ""+itemId, "=", ""));
                if(!SqlConnector.doUpdateQuery(incomesUpdate)) {
                    return;
                }
            } 
            
            itemList.add(item);
        }

        /*
            WYSLANIE E MEILA
            Jezeli nowe zamowienie wysylamy order created
            Jezeli edycja spradzamy czy zmieniamy    
        */
        MailMessage mail = new MailMessage();
        mail.setToEmail(title);
        mail.setItemTable(itemList);
        mail.setOrderId(addedOrderID.toString());
        mail.setTrackingId(trackingIdNumber);
        
        mail.setMailType(orderStateObject);

        if(OrderViewWindowType.VIEW == type) {
            if(oldOrderStatus != (OrderStatus)orderState.getSelectedItem()) {
                MailSender.sendMail(mail);
            }
        } else if(OrderViewWindowType.NEW_ORDER == type) {
            MailSender.sendMail(mail);
        }
        
        //ZAMKNIECIE OKNA
        parent.doAction("REFRESH_TABLE");
        this.dispose();        
    }//GEN-LAST:event_addNewOrderButtonActionPerformed

    private void paymentDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentDateActionPerformed

    private void ourShipmentCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ourShipmentCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ourShipmentCostActionPerformed

    private void removeSelectedItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedItemButtonActionPerformed
        int selectedItem = itemsTable.getSelectedRow();
        if(selectedItem >= 0) {
            DefaultTableModel model = (DefaultTableModel)itemsTable.getModel();
            
            //wyswietlanie takze  order id  zeby sprawdzac  czy item juz dodany do db czy trzeba dodac  czy usuwajac  trzeba usunac z db
            Object id = model.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.ID.toString()).getModelIndex());
            Object itemId = model.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.ITEM_ID.toString()).getModelIndex());
            Object itemAmount = model.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.ILOSC.toString()).getModelIndex());            
            Log.log("ORDER VIEW IWNDOW type: " + type);
            if(type == OrderViewWindowType.VIEW && itemId != null && id != null) {                
                String itemOutDelete = Sql.getDeleteQuery(ItemsOutStruct.getTableName(),Sql.getWhereMap(ItemsOutStruct.ID.toString(), ""+id, "=", ""));
                if(SqlConnector.doDeleteQuery(itemOutDelete))
                {
                    String incomesUpdate = Sql.getUpdateQuery(ItemsInStruct.getTableName(), Sql.getUpdateMap(ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString(), ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString() + "+" + itemAmount), Sql.getWhereMap(ItemsInStruct.ITEM_ID.toString(), ""+itemId, "=", ""));
                    if(!SqlConnector.doUpdateQuery(incomesUpdate)) {                    
                        return;
                    }  
                } else {
                    return;
                }
            }            
            Log.log("SELECTED ITEM " + selectedItem);
            model.removeRow(selectedItem);
                       
            refreshOrdersItemTable();
        }
    }//GEN-LAST:event_removeSelectedItemButtonActionPerformed

    private void sumAllValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumAllValuesActionPerformed
        BigDecimal summary = BigDecimal.ZERO;
        BigDecimal amount;
        BigDecimal price;
        BigDecimal rabat;
        BigDecimal shipment = new BigDecimal(shipmentCost.getText());
        
        for(int i=0; i<itemsTable.getRowCount(); i++) {
            amount = new BigDecimal(itemsTable.getValueAt(i, itemsTable.getColumn(ItemsOutStruct.ILOSC.toString()).getModelIndex()).toString());
            price = new BigDecimal(itemsTable.getValueAt(i, itemsTable.getColumn(ItemsOutStruct.CENA_DETALICZNA.toString()).getModelIndex()).toString());
            rabat = new BigDecimal(itemsTable.getValueAt(i, itemsTable.getColumn(ItemsOutStruct.RABAT.toString()).getModelIndex()).toString());        
            
            summary = summary.add(price.multiply(amount).add(rabat).setScale(2, RoundingMode.HALF_UP));            
        }
        summary = summary.add(shipment);
        this.summary.setText(""+summary);
    }//GEN-LAST:event_sumAllValuesActionPerformed

    private void shipmentCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shipmentCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shipmentCostActionPerformed

    private void itemsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemsTableKeyReleased

    }//GEN-LAST:event_itemsTableKeyReleased

    private void itemReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemReturnButtonActionPerformed
        int selectedItem = itemsTable.getSelectedRow();
        if(selectedItem < 0) {
            showWarning("Select Item To Add Return");
            return;
        } else {
            showWarning(false);
        }
        
        Map<ItemReturnParam, Object> params = new HashMap();
        
        params.put(ItemReturnParam.ITEM_ORDER, orderID.getText());
        params.put(ItemReturnParam.ITEM_CODE, itemsTable.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.KOD_PRODUKTU.toString()).getModelIndex()));
        params.put(ItemReturnParam.ITEM_AMOUNT, itemsTable.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.ILOSC.toString()).getModelIndex()));
        params.put(ItemReturnParam.ITEM_DETAL_PRICE, itemsTable.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.CENA_DETALICZNA.toString()).getModelIndex()));
        params.put(ItemReturnParam.ITEM_ID, itemsTable.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.ITEM_ID.toString()).getModelIndex()));
        params.put(ItemReturnParam.ITEM_HURT_PRICE, itemsTable.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.CENA_HURTOWA.toString()).getModelIndex()));
        params.put(ItemReturnParam.ITEM_RABAT, itemsTable.getValueAt(selectedItem, itemsTable.getColumn(ItemsOutStruct.RABAT.toString()).getModelIndex()));

        ItemReturnWindow itemReturn = new ItemReturnWindow(this, params);
        this.add(itemReturn, 0);
        this.repaint();
        this.setWindowState(false);
    }//GEN-LAST:event_itemReturnButtonActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        parent.setWindowState(true);
    }//GEN-LAST:event_formInternalFrameClosed

    private void orderStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_orderStateItemStateChanged
        
    }//GEN-LAST:event_orderStateItemStateChanged

    private void orderStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderStateActionPerformed
        setOrderState((OrderStatus) orderState.getSelectedItem());
    }//GEN-LAST:event_orderStateActionPerformed

    private void orderStateMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderStateMouseReleased

    }//GEN-LAST:event_orderStateMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewOrderButton;
    private javax.swing.JComboBox allegro;
    private javax.swing.JTextField buyerID;
    private javax.swing.JButton buyerIdSearchButon;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton itemReturnButton;
    private javax.swing.JTable itemsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField orderID;
    private javax.swing.JComboBox orderState;
    private javax.swing.JTextField ourShipmentCost;
    private javax.swing.JTextField paymentDate;
    private javax.swing.JTextField paymentID;
    private javax.swing.JComboBox paymentMethod;
    private javax.swing.JComboBox paymentStatus;
    private javax.swing.JButton productCodeSearchButon;
    private javax.swing.JComboBox recordType;
    private javax.swing.JButton removeSelectedItemButton;
    private javax.swing.JTextField saleDate;
    private javax.swing.JTextField shipmentCost;
    private javax.swing.JComboBox shipmentType;
    private javax.swing.JButton sumAllValues;
    private javax.swing.JTextField summary;
    private javax.swing.JTextField trackingId;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables

    private void clearAllFields() {
        saleDate.setText(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
        paymentDate.setText(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
        itemsTable.setModel(new DefaultTableModel(null, ItemsOutStruct.valuesAsString()));
    }
    
    private boolean validateFields() {
        String warningMessage = "";    
        if(buyerID.getText().equals("")) {
            warningMessage = "YOU NEED TO ADD CUSTOMER";
        }
        
 
        if(!warningMessage.equals("")) {
            warningLabel.setText(warningMessage);
            return false;
        } else {
            return true;
        }
        
    }

    private void refreshOrdersItemTable() {        
        if(this.type == OrderViewWindowType.VIEW) {            
            DefaultTableModel model = new DefaultTableModel(null, ItemsOutStruct.valuesAsString());
            String sqlSelect = Sql.getSelectQuery(ItemsOutStruct.getTableName(), ItemsOutStruct.values(), Sql.getWhereMap(ItemsOutStruct.ORDER_ID.toString(), orderID.getText(), "=", null));
            SqlConnector.doSelectQuery(sqlSelect, ItemsOutStruct.values(), model);
            itemsTable.setModel(model);
            itemsTable.repaint();
        }
    }

    @Override
    public void setWindowState(boolean enabled) {
        this.setEnabled(enabled);
        for(Component comp : this.getContentPane().getComponents()) {
            comp.setEnabled(enabled);
        }
        itemsTable.setEnabled(enabled);
        jScrollPane1.setWheelScrollingEnabled(enabled);
        jScrollPane1.getVerticalScrollBar().setEnabled(enabled);
        
    }

    @Override
    public void setResult() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setResult(Object singleResult) {
        buyerID.setText(""+singleResult);
    }

    @Override
    public void setResult(Map<Object, String> resultMap) {
        Object[] row = new Object[itemsTable.getColumnCount()];
        for(Entry<Object, String> entry : resultMap.entrySet()) {
            switch(entry.getKey().toString()) {
                case "CUSTOMER_ID": buyerID.setText(entry.getValue()); return;
                case "ITEM_CODE": row[itemsTable.getColumn(ItemsOutStruct.KOD_PRODUKTU).getModelIndex()] = entry.getValue(); break;
                case "ITEM_AMOUNT": row[itemsTable.getColumn(ItemsOutStruct.ILOSC).getModelIndex()] = entry.getValue(); break;
                case "ITEM_HURT_PRICE": row[itemsTable.getColumn(ItemsOutStruct.CENA_HURTOWA).getModelIndex()] = entry.getValue(); break;
                case "ITEM_DETAL_PRICE": row[itemsTable.getColumn(ItemsOutStruct.CENA_DETALICZNA).getModelIndex()] = entry.getValue(); break;
                case "ITEM_RABAT": row[itemsTable.getColumn(ItemsOutStruct.RABAT).getModelIndex()] = entry.getValue(); break;
                case "ITEM_ITEM_ID": row[itemsTable.getColumn(ItemsOutStruct.ITEM_ID).getModelIndex()] = entry.getValue(); break;
                                    
                default: break;
            }
        }
        DefaultTableModel model = (DefaultTableModel)itemsTable.getModel();
        model.addRow(row);
    }   
    
    private void showWarning(boolean isVisible) {
        showWarning("", isVisible);
    }
    
    private void showWarning(String warning) {
        showWarning(warning, true);
    }
    
    private void showWarning(String warning, boolean isVisible) {
        warningLabel.setText(warning);
        warningLabel.setVisible(isVisible);
    }

    @Override
    public void doAction(String action) {

    }

    private void setOrderState(OrderStatus selectedItem) {
        Log.log("TEST " + selectedItem);
        isOrderStateChanged = true;
    }
}
