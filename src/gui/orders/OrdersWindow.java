/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.orders;

import gui.InfoDialog;
import gui.items.ItemsOutStruct;
import gui.Window;
import gui.items.ItemsInStruct;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;
import sqlconnector.SqlWhereStruct;

/**
 *
 * @author User
 */
public class OrdersWindow extends javax.swing.JInternalFrame implements Window {

    private OrdersWindowType type = OrdersWindowType.ORDERS;
    private Window parent = null;
    private int customerId = 0;
    
    public OrdersWindow() {
        super("ORDERS", true,true,true,true);
        initComponents();
        this.setResizable(true);
        this.setVisible(true);
        this.refreshTable(this.getFiltersMap());
    }
     
    public OrdersWindow(OrdersWindowType type, Window parent, int customerId) {
        super("ORDERS", true,true,true,true);
        initComponents();
        this.setResizable(true);
        this.setVisible(true);
        setOrdersWindowType(type);
        this.parent = parent;
        this.customerId = customerId;
        this.refreshTable(this.getFiltersMap());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        newOrderButton = new javax.swing.JButton();
        deleteOrderButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        viewOrderButton = new javax.swing.JButton();
        closeOrderWindowButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dateFilter = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dateToFilter = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        paymentStatusFilter = new javax.swing.JComboBox();

        jLabel1.setText("jLabel1");

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jButton1)
                        .addGap(59, 59, 59)
                        .addComponent(jButton2))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel1)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel1)
                .addGap(62, 62, 62)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        newOrderButton.setText("NEW ORDER");
        newOrderButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                newOrderButtonMouseReleased(evt);
            }
        });
        newOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOrderButtonActionPerformed(evt);
            }
        });

        deleteOrderButton.setEnabled(false);
        deleteOrderButton.setText("DELETE ORDER");
        deleteOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOrderButtonActionPerformed(evt);
            }
        });

        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            null,
            OrdersStruct.getColumnNames()
        ));
        ordersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ordersTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ordersTable);

        viewOrderButton.setEnabled(false);
        viewOrderButton.setText("VIEW ORDER");
        viewOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderButtonActionPerformed(evt);
            }
        });

        closeOrderWindowButton.setText("CLOSE ORDER WINDOW");
        closeOrderWindowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeOrderWindowButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("REFRESH TABLE");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("DATE FROM");

        dateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFilterActionPerformed(evt);
            }
        });
        dateFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateFilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dateFilterKeyTyped(evt);
            }
        });

        jLabel3.setText("DATE TO");

        dateToFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateToFilterKeyReleased(evt);
            }
        });

        jLabel4.setText("PAYMENT STATUS");

        paymentStatusFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "BRAK WPŁATY", "ZAPŁACONE", "WIENIEK" }));
        paymentStatusFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paymentStatusFilterItemStateChanged(evt);
            }
        });
        paymentStatusFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentStatusFilterKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 310, Short.MAX_VALUE)
                        .addComponent(closeOrderWindowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateFilter)
                            .addComponent(dateToFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(paymentStatusFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newOrderButton)
                    .addComponent(viewOrderButton)
                    .addComponent(deleteOrderButton)
                    .addComponent(closeOrderWindowButton)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(paymentStatusFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dateToFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderButtonActionPerformed
        Map<String, Object> properties = new HashMap();
        int selectedOrder = ordersTable.getSelectedRow();

        for(int i=0; i<ordersTable.getColumnCount(); i++) {
            properties.put(ordersTable.getColumnName(i), ordersTable.getValueAt(selectedOrder, i));
        }                        
        
        OrderViewWindow viewWindow = new OrderViewWindow(this, OrderViewWindowType.VIEW, properties);
        viewWindow.setVisible(true);
        this.add(viewWindow, 0);  
        this.repaint(); 
        this.setWindowState(false);
    }//GEN-LAST:event_viewOrderButtonActionPerformed

    private void ordersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersTableMouseClicked

    }//GEN-LAST:event_ordersTableMouseClicked

    private void closeOrderWindowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeOrderWindowButtonActionPerformed
        this.setVisible(false);
        if(parent != null) {
            parent.setWindowState(true);
        }
        this.dispose();
    }//GEN-LAST:event_closeOrderWindowButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        viewOrderButton.setEnabled(false);
        deleteOrderButton.setEnabled(false);
        this.refreshTable(this.getFiltersMap());
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void newOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOrderButtonActionPerformed

    }//GEN-LAST:event_newOrderButtonActionPerformed

    private void newOrderButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newOrderButtonMouseReleased
        OrderViewWindow orderViewWindow = new OrderViewWindow(this, OrderViewWindowType.NEW_ORDER);
        orderViewWindow.setVisible(true);
        this.getContentPane().add(orderViewWindow, 0); 
        this.repaint(); 
        this.setWindowState(false);        
    }//GEN-LAST:event_newOrderButtonMouseReleased

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
              // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        if(parent != null) {
            parent.setWindowState(true);
        }        
    }//GEN-LAST:event_formInternalFrameClosed

    private void deleteOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOrderButtonActionPerformed
        int selectedOrder = ordersTable.getSelectedRow();
        Object orderId = ordersTable.getValueAt(selectedOrder, ordersTable.getColumn(ItemsOutStruct.ID.toString()).getModelIndex());
        createInfoDialog("DELETING ORDER: " + orderId + " CONTINUE ?", "DELETING_ORDER_CONFIRM");
        this.setWindowState((false));
        this.repaint();  
    }//GEN-LAST:event_deleteOrderButtonActionPerformed

    private void ordersTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersTableMouseReleased
        if(this.isEnabled()) {
            if(ordersTable.getSelectedRow() == -1) {
                viewOrderButton.setEnabled(false);
                deleteOrderButton.setEnabled(false);
            } else {
                viewOrderButton.setEnabled(true);
                deleteOrderButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_ordersTableMouseReleased

    private void dateFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateFilterKeyTyped

        
        
    }//GEN-LAST:event_dateFilterKeyTyped

    private void dateFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateFilterKeyReleased
        refreshTable(this.getFiltersMap());
    }//GEN-LAST:event_dateFilterKeyReleased

    private void dateToFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateToFilterKeyReleased
        refreshTable(this.getFiltersMap());
    }//GEN-LAST:event_dateToFilterKeyReleased

    private void dateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFilterActionPerformed

    private void paymentStatusFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentStatusFilterKeyReleased
        
    }//GEN-LAST:event_paymentStatusFilterKeyReleased

    private void paymentStatusFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paymentStatusFilterItemStateChanged
        refreshTable(this.getFiltersMap());
    }//GEN-LAST:event_paymentStatusFilterItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeOrderWindowButton;
    private javax.swing.JTextField dateFilter;
    private javax.swing.JTextField dateToFilter;
    private javax.swing.JButton deleteOrderButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newOrderButton;
    private javax.swing.JTable ordersTable;
    private javax.swing.JComboBox paymentStatusFilter;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton viewOrderButton;
    // End of variables declaration//GEN-END:variables

    private void refreshTable() {
        DefaultTableModel model = new DefaultTableModel(null, OrdersStruct.valuesAsString());
        String query;       
        if(OrdersWindowType.CUSTOMER_ORDERS == type) {
            query = Sql.getSelectQuery(OrdersStruct.getTableName(), OrdersStruct.values(), Sql.getWhereMap(OrdersStruct.CUSTOMER_ID.toString(), ""+this.customerId, "=", ""));
        } else {
            query = Sql.getSelectQuery(OrdersStruct.getTableName(), OrdersStruct.values());
        }        
        
        SqlConnector.doSelectQuery(query, OrdersStruct.values(), model);
        
        ordersTable.setModel(model);
        ordersTable.repaint(); 
    }

    private void setOrdersWindowType(OrdersWindowType type) {
        this.type = type;
        switch(type) {
            case ORDERS:
                newOrderButton.setEnabled(true);
                break;
            case CUSTOMER_ORDERS:
                newOrderButton.setEnabled(false);
                break;
        }              
    }

    private void refreshTable(List<Map<SqlWhereStruct, Object>> params) {
        DefaultTableModel model = new DefaultTableModel(null, OrdersStruct.getColumnNames());
        String query;       
        if(OrdersWindowType.CUSTOMER_ORDERS == type) {
            query = Sql.getSelectQuery(OrdersStruct.getTableName(), OrdersStruct.values(), Sql.getWhereMap(OrdersStruct.CUSTOMER_ID.toString(), ""+this.customerId, "=", ""));
        } else {
            query = Sql.getSelectQuery(OrdersStruct.getTableName(), OrdersStruct.values(), params, Sql.getOrderMap(OrdersStruct.ORDER_DATE, "DESC"));
        }        
        
        SqlConnector.doSelectQuery(query, OrdersStruct.values(), model);
        
        ordersTable.setModel(model);
        ordersTable.repaint(); 
    }

    @Override
    public void setWindowState(boolean enabled) {
        this.setEnabled(enabled);
        for(Component comp : this.getContentPane().getComponents()) {
            comp.setEnabled(enabled);
        }
        ordersTable.setEnabled(enabled);
        jScrollPane1.setEnabled(enabled);
        jScrollPane1.setWheelScrollingEnabled(enabled);
        jScrollPane1.getVerticalScrollBar().setEnabled(enabled);
    }

    @Override
    public void setResult() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setResult(Object singleResult) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setResult(Map<Object, String> resultMap) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private void createInfoDialog(String message, String action) {
        InfoDialog dialog = new InfoDialog(this, message, action);
        dialog.setBounds((this.getWidth()/2) - (dialog.getWidth()/2), (this.getHeight()/2) - (dialog.getHeight()/2), dialog.getWidth(), dialog.getHeight());
        this.add(dialog, 0);
        this.repaint();
        this.setWindowState(false);
    }

    @Override
    public void doAction(String action) {
        switch(action) {
            case "DELETING_ORDER_CONFIRM": deleteSelectedOrder(); break;
            case "REFRESH_TABLE": refreshTable(this.getFiltersMap()); break;
            
            default: break;
        }
    }
    
    private void deleteSelectedOrder() {
        int selectedOrder = ordersTable.getSelectedRow();
        Object orderId = ordersTable.getValueAt(selectedOrder, ordersTable.getColumn(OrdersStruct.ID.toString()).getModelIndex());
        
        //potrzebne ITEM_ID do zaktualizowania stanow
        DefaultTableModel model = new DefaultTableModel(null, ItemsOutStruct.valuesAsString());
        
        String sqlSelect = Sql.getSelectQuery(ItemsOutStruct.getTableName(), ItemsOutStruct.values(), Sql.getWhereMap(ItemsOutStruct.ORDER_ID.toString(), orderId.toString(), "=", null));
        SqlConnector.doSelectQuery(sqlSelect, ItemsOutStruct.values(), model);

        for(int i=0; i<model.getRowCount();i++) {
            Object id = model.getValueAt(i, model.findColumn(ItemsOutStruct.ID.toString()));
            Object itemId = model.getValueAt(i, model.findColumn(ItemsOutStruct.ITEM_ID.toString()));
            Object itemAmount = model.getValueAt(i, model.findColumn(ItemsOutStruct.ILOSC.toString()));

            String itemOutDelete = Sql.getDeleteQuery(ItemsOutStruct.getTableName(),Sql.getWhereMap(ItemsOutStruct.ID.toString(), ""+id, "=", ""));
            if(SqlConnector.doDeleteQuery(itemOutDelete))
            {
                String incomesUpdate = Sql.getUpdateQuery(ItemsInStruct.getTableName(), Sql.getUpdateMap(ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString(), ItemsInStruct.ITEM_ACTUAL_AMOUNT.toString() + "+" + itemAmount), Sql.getWhereMap(ItemsInStruct.ITEM_ID.toString(), ""+itemId, "=", ""));
                if(!SqlConnector.doUpdateQuery(incomesUpdate)) {                    
                    return;
                }  
            } else {
                return;
            }
        }

        String deleteOrder = Sql.getDeleteQuery(OrdersStruct.getTableName(), Sql.getWhereMap(OrdersStruct.ID.toString(), ""+orderId, "=", ""));
        SqlConnector.doDeleteQuery(deleteOrder);
        
        refreshTable();   
    }

    private List<Map<SqlWhereStruct, Object>> getFiltersMap() {
        List<Map<SqlWhereStruct, Object>> params = new ArrayList();
        
        if(!dateFilter.getText().equals("")) {
            params.add(Sql.getWhereMap(OrdersStruct.PAYMENT_DATE.toString(), dateFilter.getText(), ">=", "AND"));
            //params.add(Sql.getWhereMap(OrdersStruct.ORDER_DATE.toString(), dateFilter.getText(), ">=", "AND"));
        }        
        if(!dateToFilter.getText().equals("")) {
            params.add(Sql.getWhereMap(OrdersStruct.PAYMENT_DATE.toString(), dateToFilter.getText(), "<=", "AND"));
            //params.add(Sql.getWhereMap(OrdersStruct.ORDER_DATE.toString(), dateToFilter.getText(), "<=", "AND"));
        } 
        

        params.add(Sql.getWhereMap(OrdersStruct.PAYMENT_STATUS.toString(), paymentStatusFilter.getSelectedItem().toString(), "=", "AND"));

        //params.add(Sql.getWhereMap(OrdersStruct.PAYMENT_DATE.toString(), "", "=", "AND"));
        
        return params;
    }
}
