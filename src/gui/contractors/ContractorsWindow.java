/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.contractors;

import gui.Window;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;
import sqlconnector.SqlWhereStruct;

/**
 *
 * @author User
 */
public class ContractorsWindow extends javax.swing.JInternalFrame implements Window {

    Window parent;
    
    public ContractorsWindow() {
        super("CONTRACTORS", true, true, true, true);
        initComponents();
        onInit();
    }

    public ContractorsWindow(Window parent) {
        super("CONTRACTORS", true, true, true, true);
        this.parent = parent;
        initComponents();
        onInit();
    }
    
    private void onInit() {
        this.setVisible(true);
        refreshTable();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        contractorsTable = new javax.swing.JTable();
        addContractor = new javax.swing.JButton();
        deleteContractor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nameFilter = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nipFilter = new javax.swing.JTextField();
        select = new javax.swing.JButton();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        contractorsTable.setModel(new javax.swing.table.DefaultTableModel(
            null,
            ContractorsStruct.values()
        ));
        jScrollPane1.setViewportView(contractorsTable);

        addContractor.setText("ADD NEW CONTRACTOR");
        addContractor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addContractorMouseReleased(evt);
            }
        });
        addContractor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContractorActionPerformed(evt);
            }
        });

        deleteContractor.setText("DELETE CONTRACTOR");
        deleteContractor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContractorActionPerformed(evt);
            }
        });

        jLabel1.setText("NAME");

        nameFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameFilterKeyReleased(evt);
            }
        });

        jLabel2.setText("NIP");

        if(parent != null) {
            select.setVisible(true);
        } else {
            select.setVisible(false);
        }
        select.setText("SELECT");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addContractor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteContractor))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addGap(8, 8, 8)
                                .addComponent(nipFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 293, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addContractor)
                    .addComponent(deleteContractor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nipFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(select)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFilterKeyReleased
        refreshTable(getFiltersMap());
    }//GEN-LAST:event_nameFilterKeyReleased

    private void addContractorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContractorActionPerformed
        NewContractor contractor = new NewContractor(this, "ADD_NEW_CONTRACTOR");
        contractor.setBounds((this.getWidth()/2) - (contractor.getWidth()/2), (this.getHeight()/2) - (contractor.getHeight()/2), contractor.getWidth(), contractor.getHeight());
        this.getContentPane().add(contractor, 0);
        this.setWindowState(false);
        this.getContentPane().repaint();
    }//GEN-LAST:event_addContractorActionPerformed

    private void addContractorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addContractorMouseReleased

    }//GEN-LAST:event_addContractorMouseReleased

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        int selectedRow = contractorsTable.getSelectedRow();
        if(selectedRow > -1) {
            Object contractorId = contractorsTable.getValueAt(selectedRow, contractorsTable.getColumn(ContractorsStruct.CONTRACTOR_ID.toString()).getModelIndex());
            parent.setResult(contractorId);
            this.dispose();
            parent.setWindowState(true);
        }
    }//GEN-LAST:event_selectActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        if(parent != null) {
            parent.setWindowState(true);
        }
    }//GEN-LAST:event_formInternalFrameClosed

    private void deleteContractorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContractorActionPerformed
        
    }//GEN-LAST:event_deleteContractorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContractor;
    private javax.swing.JTable contractorsTable;
    private javax.swing.JButton deleteContractor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameFilter;
    private javax.swing.JTextField nipFilter;
    private javax.swing.JButton select;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setWindowState(boolean enabled) {
        for(Component comp : this.getContentPane().getComponents()) {
            comp.setEnabled(enabled);
        }
        jScrollPane1.setEnabled(enabled);
        jScrollPane1.setWheelScrollingEnabled(enabled);
        jScrollPane1.getVerticalScrollBar().setEnabled(enabled);
        
        contractorsTable.setEnabled(enabled);
    }

    @Override
    public void setResult() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setResult(Object singleResult) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setResult(Map<Object, String> resultMap) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void doAction(String action) {
        clearFilters();
        refreshTable();
    }
    
    private List<Map<SqlWhereStruct, Object>> getFiltersMap() {
        List<Map<SqlWhereStruct, Object>> params = new ArrayList();
        
        if(!nameFilter.getText().equals("")) {
            params.add(Sql.getWhereMap(ContractorsStruct.CONTRACTOR_DATA.toString(), "%"+nameFilter.getText()+"%", "LIKE", "AND"));            
        }        
        if(!nipFilter.getText().equals("")) {
            params.add(Sql.getWhereMap(ContractorsStruct.CONTRACTOR_NIP.toString(), "%"+nipFilter.getText()+"%", "LIKE", "AND"));            
        } 

        return params;
    }
    
    private void refreshTable(List<Map<SqlWhereStruct, Object>> params) {
        DefaultTableModel model = new DefaultTableModel(null, ContractorsStruct.valuesAsString());
        String query;       

        query = Sql.getSelectQuery(ContractorsStruct.getTableName(), ContractorsStruct.values(), params);
       
        
        SqlConnector.doSelectQuery(query, ContractorsStruct.values(), model);
        
        contractorsTable.setModel(model);
        contractorsTable.repaint(); 
    }

    private void refreshTable() {
        refreshTable(new ArrayList());
    }

    private void clearFilters() {
        nameFilter.setText("");
        nipFilter.setText("");
    }
}
