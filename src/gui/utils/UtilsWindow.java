/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.utils;

import database.databaseStruct.OutcomesStruct;
import database.databaseStruct.TableStructInterface;
import gui.customers.CustomersStruct;
import gui.items.ItemsOutStruct;
import gui.orders.OrdersStruct;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import sqlconnector.Sql;
import sqlconnector.SqlConnector;

/**
 *
 * @author User
 */
public class UtilsWindow extends javax.swing.JInternalFrame {

    /**
     * Creates new form UtilsWindow
     */
    public UtilsWindow() {
        initComponents();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        migration = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        migration.setText("Migracja ewidencjaOut");
        migration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                migrationActionPerformed(evt);
            }
        });

        jButton1.setText("Sprawdz Kwoty ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(migration, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                .addContainerGap(382, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(migration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(270, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void migrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_migrationActionPerformed
        DefaultTableModel ewidencja_out = new DefaultTableModel(null, OutcomesStruct.values());
        String query = Sql.getSelectQuery(OutcomesStruct.getTableName(), OutcomesStruct.values());
        SqlConnector.doSelectQuery(query, OutcomesStruct.values(), ewidencja_out);
        String dodanyOrder = "";
        Map<TableStructInterface, Object> oldOrdersMap = new HashMap();
        
        String ORDERS_TABLE = "orders";
        String ITEMS_TABLE = "items_out";
        String oldAllegroNick = "";
        String oldCustomerData = "";
        String newAllegroNick = "";
        String newCustomerData = "";
        String daneKupujacy = "";
        for(int row=0; row<ewidencja_out.getRowCount(); row++) {
            System.out.println("CUSTOMERS " + row ); 
            Map<TableStructInterface, Object> ordersMap = new HashMap();
            Map<TableStructInterface, Object> itemsOutMap = new HashMap();
            ordersMap.put(OrdersStruct.ID, row+40);
             
            itemsOutMap.put(ItemsOutStruct.ORDER_ID, row+40);
            boolean czySzukacCustomera = true;
            for(int column = 0; column<ewidencja_out.getColumnCount(); column++){
                //MAPOWANIE
                //OutcomesStruct na ItemsOutStruct i OrdersStruct
                Object value = ewidencja_out.getValueAt(row, column);
                String customerId = "";   

                switch(OutcomesStruct.values()[column]) {
                    
                    case DATA_SPRZEDAZY: 
                        ordersMap.put(OrdersStruct.ORDER_DATE, value); 
                        ordersMap.put(OrdersStruct.PAYMENT_DATE, value); 
                        break;
                    case TYP_PLATNOSCI: ordersMap.put(OrdersStruct.PAYMENT_TYPE, value); break;
                    case ID_PLATNOSCI: ordersMap.put(OrdersStruct.PAYMENT_ID, value); break;
                    case ID_KUPUJACY: 
                        
                        if(!value.equals(0)) {
                            czySzukacCustomera = false;
                            ordersMap.put(OrdersStruct.CUSTOMER_ID, value);
                        }                        
                        break;
                    case KOD_PRODUKTU: itemsOutMap.put(ItemsOutStruct.KOD_PRODUKTU, value); 
                        
                    break;
                    case TYP_EWIDENCJI: ordersMap.put(OrdersStruct.RECORD_TYPE, value); break;
                    case STATUS_PLATNOSCI: ordersMap.put(OrdersStruct.PAYMENT_STATUS, value); break;
                    case KOSZT_DOSTAWY: ordersMap.put(OrdersStruct.SHIPMENT_COST, value); break;
                    case TYP_DOSTAWY: ordersMap.put(OrdersStruct.SHIPMENT_TYPE, value); break;
                    case NASZ_KOSZT_DOSTAWY: ordersMap.put(OrdersStruct.SHIPMENT_OUR_COST, value); break;
                    case ILOSC: itemsOutMap.put(ItemsOutStruct.ILOSC, value); ; break;
                    case CENA_HURTOWA: itemsOutMap.put(ItemsOutStruct.CENA_HURTOWA, value); ; break;
                    case CENA_DETALICZNA: itemsOutMap.put(ItemsOutStruct.CENA_DETALICZNA, value); ; break;
                    case RABAT: itemsOutMap.put(ItemsOutStruct.RABAT, value); ; break;
                    case ALLEGRO: ordersMap.put(OrdersStruct.ALLEGRO_FLAG, value); break;
                    case NICK_KUPUJACY: 
                        newAllegroNick = (String)value;
                        System.out.println("NICK_KUPUJACY " + czySzukacCustomera + " " + customerId + " " + value);
                        if(czySzukacCustomera && customerId.equals("")) {
                            if(value != null && (!value.toString().replaceAll(" ", "").equals("") && !value.toString().replaceAll(" ", "").equals("--"))) {
                                DefaultTableModel model = new DefaultTableModel(null, CustomersStruct.getValuesAsString());
                                String queryCustomers = "SELECT * FROM CUSTOMERS WHERE CUSTOMER_ALLEGRO_NICK" + " = '" + value.toString().replaceAll(" ", "") + "';";
                                SqlConnector.doSelectQuery(queryCustomers, CustomersStruct.values(), model);                            
                                if(model.getRowCount() > 0) {
                                    customerId = ""+model.getValueAt(0, model.findColumn(CustomersStruct.CUSTOMER_ID.toString()));
                                    String customerName = ""+model.getValueAt(0, model.findColumn(CustomersStruct.CUSTOMER_ALLEGRO_NICK.toString()));     
                                    if(!customerName.replace(" ", "").equals(value.toString().replace(" ", ""))) {
                                        System.out.println("CUSTOMERS " + customerName + " " + value);
                                    }
                                    ordersMap.put(OrdersStruct.CUSTOMER_ID, customerId); 
                                    czySzukacCustomera = false;
                                    break;
                                }                                    
                                
                            }
                        }
                        break;
                    case DANE_KUPUJACY: 
                        System.out.println("NICK_KUPUJACY " + czySzukacCustomera + " " + customerId + " " + value);
                        newCustomerData = (String)value;
                        if(czySzukacCustomera && customerId.equals("")) {
                            if(!value.equals("") && !value.equals("--")) {
                                DefaultTableModel model = new DefaultTableModel(null, CustomersStruct.getValuesAsString());
                                String[] dataCustomer = value.toString().split(" ");
                                String queryCustomers = "SELECT * FROM CUSTOMERS WHERE " + CustomersStruct.CUSTOMER_NAME.toString() + " = '" + dataCustomer[0].toString().replaceAll(" ", "") + "'";
                                if(dataCustomer.length > 1) {
                                    queryCustomers += " AND " + CustomersStruct.CUSTOMER_SURNAME.toString() + " = '" + dataCustomer[1].toString().replaceAll(" ", "") + "';";
                                }                                        
                                SqlConnector.doSelectQuery(queryCustomers, CustomersStruct.values(), model);                            
                                if(model.getRowCount() > 0) {
                                    customerId = ""+model.getValueAt(0, model.findColumn(CustomersStruct.CUSTOMER_ID.toString()));
                                    String customerName = ""+model.getValueAt(0, model.findColumn(CustomersStruct.CUSTOMER_NAME.toString())) + " " + model.getValueAt(0, model.findColumn(CustomersStruct.CUSTOMER_SURNAME.toString())) ;     
                                    if("Paweł Biraga".equals(value.toString().replace(" ", ""))) {
                                        System.out.println("CUSTOMERS " + customerName + " " + value);
                                    }
                                    ordersMap.put(OrdersStruct.CUSTOMER_ID, customerId); break;
                                }                                    
                            }
                        }
                        break;
                    default: continue;
                    
                }
                
                //ordersMap.put(OrdersStruct.getColumnTypeMap(ewidencja_out.getColumnName(column)), value);
                //itemsOutMap.put(ItemsOutStruct.getColumnTypeMap(ewidencja_out.getColumnName(column)), value);
            }

            itemsOutMap.put(ItemsOutStruct.ITEM_ID, 0);
            
            //SPRAWDZAMY CZY OSTATNI ORDER  JEST TAKI SAM JAK NASTEPNY JEZLEI TAK TO TYLKO SAME ITEMY
            if(oldAllegroNick != null && newAllegroNick != null && newCustomerData != null && (!oldAllegroNick.equals("") && oldAllegroNick.equals(newAllegroNick)) || (!oldCustomerData.equals("") && oldCustomerData.equals(newCustomerData))) {
                itemsOutMap.put(ItemsOutStruct.ORDER_ID, dodanyOrder);
                
                String itemsInsert = Sql.getInsertQuery(ITEMS_TABLE, itemsOutMap);
                oldAllegroNick = "";
                oldCustomerData = "";
                if(!SqlConnector.doInsertQuery(itemsInsert)) {

                    return;
                }  
            
                //TYLKO SAME  ITEMY DO POPRZEDNIEGO ORDERA  ->> dodanyOrder
            } else {
                //WRZUCENIE WPISU DO ORDERS
                String insertOrder = Sql.getReplaceIntoQuery(ORDERS_TABLE, ordersMap);
                if(SqlConnector.doInsertQuery(insertOrder)) {
                    oldAllegroNick = newAllegroNick;
                    oldCustomerData = newCustomerData;
                    
                    int liczba = row + 40;
                    dodanyOrder = ""+liczba;
                    String itemsInsert = Sql.getInsertQuery(ITEMS_TABLE, itemsOutMap);
                    if(!SqlConnector.doInsertQuery(itemsInsert)) {
                        
                        return;
                    }
                } else {
                    
                    return;
                }   
            }
            

            
            oldOrdersMap = ordersMap;
        }          
    }//GEN-LAST:event_migrationActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = new DefaultTableModel(null, OrdersStruct.values());
        String select = Sql.getSelectQuery("orders_temp", OrdersStruct.values());
        SqlConnector.doSelectQuery(select, OrdersStruct.values(), model);
        
        
        Map<String, BigDecimal> wyniki = new HashMap();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton migration;
    // End of variables declaration//GEN-END:variables

    private void ArrayList() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public void GenerowanieCustomers() { 
        DefaultTableModel ewidencja_out = new DefaultTableModel(null, OutcomesStruct.values());
        String query = Sql.getSelectQuery(OutcomesStruct.getTableName(), OutcomesStruct.values());
        SqlConnector.doSelectQuery(query, OutcomesStruct.values(), ewidencja_out);
        
        String CUSTOMER_TABLE = "customers";
        List<List<String>> juzdodane = new ArrayList();
        List<String> dodaj;
        
        for(int row=0; row<ewidencja_out.getRowCount(); row++) {
            System.out.println("MIGRACJA " + row + " | ID: " + ewidencja_out.getValueAt(row, ewidencja_out.findColumn(OutcomesStruct.ID.toString())));
            Map<TableStructInterface, Object> ordersMap = new HashMap();
            Map<TableStructInterface, Object> itemsOutMap = new HashMap();
            dodaj = new ArrayList();
                            
            for(int column = 0; column<ewidencja_out.getColumnCount(); column++){
                //MAPOWANIE
                //OutcomesStruct na ItemsOutStruct i OrdersStruct
                Object value = ewidencja_out.getValueAt(row, column);
                
                String data;

                String allegroNick;
                //Jezlei niema id kupujacy
                //utworz kupujacego
                if(column == 4) {
                    DefaultTableModel customers = new DefaultTableModel(null, CustomersStruct.values());
                    String select = "SELECT * FROM CUSTOMERS WHERE CUSTOMER_ID = " + value + ";";

                    if(!SqlConnector.doSelectQuery(select, CustomersStruct.values(), customers)) {
                        return;
                    }
                    if(customers.getRowCount() < 1) {
                        //Czy dodalismy juz takiego ?
                        select = "INSERT INTO " + CUSTOMER_TABLE + " (`CUSTOMER_NAME`,`CUSTOMER_SURNAME`,`CUSTOMER_ALLEGRO_NICK`) VALUES ('";  
                        allegroNick = (String)ewidencja_out.getValueAt(row, 16);
                        data = (String)ewidencja_out.getValueAt(row, 17);
                        String name = "";
                        String surname = "";
                        if(!data.equals("") && data.length() > 4) {
                            name = data.split(" ")[0];
                            if(data.split(" ").length > 1)
                                surname = data.split(" ")[1];
                        }
                        select += name + "','" + surname + "','" + allegroNick + "');";
                        boolean czyDodac = true;
                        for(List<String> lista : juzdodane) {                            
                            
                            if((!data.equals("") && lista.contains(data)) || (!allegroNick.equals("") && lista.contains(allegroNick))) {
                                System.out.println("MIGRACJA " + lista.contains(data) + " -> " + data + " -> " + lista.contains(allegroNick) + " -> " + allegroNick + " CZYLI JUZ DODANY");
                                czyDodac = false;
                                break;
                            }
                        }
                        
                        if(czyDodac) {
                            if(!SqlConnector.doInsertQuery(select)) {
                                return;
                            }
                            System.out.println("MIGRACJA " + data + " | " + allegroNick + " DODANY !!");
                        }                                                
                    }
                }
                
                //ordersMap.put(OrdersStruct.getColumnTypeMap(ewidencja_out.getColumnName(column)), value);
                //itemsOutMap.put(ItemsOutStruct.getColumnTypeMap(ewidencja_out.getColumnName(column)), value);
            }
            
            String allegroNickdata = (String)ewidencja_out.getValueAt(row, 16);
            if(allegroNickdata.equals("") || allegroNickdata.equals("--")) {

            } else {
                System.out.println("MIGRACJA DODAJEMY DO LISTY " + allegroNickdata);
                dodaj.add(allegroNickdata);
            }
            
            String dataname = (String)ewidencja_out.getValueAt(row, 17);
            if(!dataname.equals("") && !dataname.equals("--"))
                System.out.println("MIGRACJA DODAJEMY DO LISTY " + dataname);
                dodaj.add(dataname);
                    
            
            juzdodane.add(dodaj);
            
            //WRZUCENIE WPISU DO ORDERS
            
            //POBRANIE OSTATNIEGO WPISU ORDERS i
            //WRZUCENIE WPISU DO ITEMS_OUT
            
            
        }    
    }
}

